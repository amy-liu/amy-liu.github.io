<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jquery | 云端笔记]]></title>
  <link href="http://amy-liu.github.io/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://amy-liu.github.io/"/>
  <updated>2015-10-14T22:40:46+08:00</updated>
  <id>http://amy-liu.github.io/</id>
  <author>
    <name><![CDATA[amy-liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQuery 之 高级事件]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/14/jquery-zhi-gao-ji-jian/"/>
    <updated>2015-10-14T22:34:16+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/14/jquery-zhi-gao-ji-jian</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery 之 事件对象]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/14/jquery-zhi-shi-jian-dui-xiang/"/>
    <updated>2015-10-14T21:58:43+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/14/jquery-zhi-shi-jian-dui-xiang</id>
    <content type="html"><![CDATA[<p>事件对象就是 <code>event</code> 对象,通过处理函数默认传递接受。之前处理函数的 <code>e</code> 就是 <code>event</code> 事件对象。</p>

<h3>一、事件对象</h3>

<pre><code>$('input').bind('click', function (e) {       //接受事件对象参数
    alert(e); 
});
</code></pre>

<p>通过 event.type 属性获取触发事件名
<code>
$('input').click(function (e) {
    alert(e.type);
});
</code>
通过 event.target 获取绑定的 DOM 元素
```
$(&lsquo;input&rsquo;).click(function (e) {
    alert(e.target);
});</p>

<!--more-->


<pre><code>通过 event.data 获取额外数据,可以是数字、字符串、数组、对象 
</code></pre>

<p>$(&lsquo;input&rsquo;).bind(&lsquo;click&rsquo;, 123, function () {          //传递 data 数据
    alert(e.data);                                   //获取数字数据
});
<code>``
注意 : 如果字符串就传递:</code>&lsquo;123&rsquo;<code>、如果是数组就传递:</code>[123,&lsquo;abc&rsquo;]<code>,如果是对象就传递:</code>{user : &lsquo;Lee&rsquo;, age : 100}<code>。数组的调用方式是:</code>e.data[1],<code>对象的调用方式是:</code>e.data.user。`</p>

<p>event.data 获取额外数据,对于封装的简写事件也可以使用
<code>
$('input').click({user : 'Lee', age : 100},function (e) {
    alert(e.data.user);
});
</code>
注意 : 键值对的键可以加上引号,也可以不加;在调用的时候也可以使用数组的方式: <code>alert(e.data['user']);</code></p>

<p>获取移入到 div 之前的那个 DOM 元素</p>

<pre><code>$('div').mouseover(function (e) {
    alert(e.relatedTarget); 
});
</code></pre>

<p>获取移出 div 之后到达最近的那个 DOM 元素</p>

<pre><code>$('div').mouseout(function (e) {
    alert(e.relatedTarget);
 });
</code></pre>

<p>获取绑定的那个 DOM 元素,相当于 this,区别与 <code>event.target</code></p>

<pre><code>$('div').click(function (e) {
    alert(e.currentTarget); 
});
</code></pre>

<p>注意 : <code>event.target</code> 得到的是触发元素的 DOM,<code>event.currentTarget</code> 得到的是监听元素的 DOM。而 <code>this</code>也是得到监听元素的 DOM。</p>

<p>获取上一次事件的返回值</p>

<pre><code>$('div').click(function (e) {
    return '123'; 
});
$('div').click(function (e) { 
    alert(e.result);
});
</code></pre>

<p>获取当前的时间戳</p>

<pre><code>$('div').click(function (e) {
    alert(e.timeStamp); 
});
</code></pre>

<p>获取触发元素鼠标当前的位置</p>

<pre><code>$(document).click(function (e) {
    alert(e.screenY+ ',' + e.pageY + ',' + e.clientY); 
});
</code></pre>

<h3>二、冒泡和默认行为</h3>

<p>如果在页面中重叠了多个元素,并且重叠的这些元素都绑定了同一个事件,那么就会出 现冒泡问题。</p>

<p>jQuery 提供了一个事件对象的方法: <code>event.stopPropagation();</code> 这个方法设置到需要触发 的事件上时,所有上层的冒泡行为都将被取消。
<code>
$('input').click(function (e) {
    alert('按钮被触发了!');
    e.stopPropagation();
});
</code>
默认行为</p>

<p>网页中的元素,在操作的时候会有自己的默认行为。比如:右击文本框输入区域,会弹 出系统菜单、点击超链接会跳转到指定页面、点击提交按钮会提交数据。
<code>
$('a').click(function (e) {
    e.preventDefault();
});
</code>
禁止提交表单跳转
<code>
$('form').submit(function (e) {
    e.preventDefault();
});
</code>
注意 : 如果想让上面的超链接同时阻止默认行为且禁止冒泡行为,可以把两个方法同时 写上: <code>event.stopPropagation()</code> 和 <code>event.preventDefault()</code> 。这两个方法如果需要同时启用的时候, 还有一种简写方案代替,就是直接 <code>return false。</code></p>

<pre><code>$('a').click(function (e) { 
    return false;
});
</code></pre>

<h2>冒泡和默认行为的一些方法</h2>

<p>判断是否取消了元素的默认行为
<code>
 $('input').keyup(function (e) {
    e.preventDefault();
    alert(e.isDefaultPrevented());
});
</code></p>

<p>取消冒泡并取消后续事件处理函数
```
$(&lsquo;input&rsquo;).click(function (e) {
    alert(&lsquo;input&rsquo;);
    e.stopImmediatePropagation();
 });</p>

<p>$(&lsquo;input&rsquo;).click(function () {
    alert(&lsquo;input2&rsquo;);
});</p>

<p>$(document).click(function () {
    alert(&lsquo;document&rsquo;);
});
```</p>

<p>判断是否调用了 <code>stopPropagation()</code> 方法</p>

<pre><code>$('input').click(function (e) {
    e.stopPropagation();
    alert(e.isPropagationStopped()); 
});
</code></pre>

<p>判断是否执行了 <code>stopImmediatePropagation()</code> 方法</p>

<pre><code>$('input').click(function (e) {
    e.stopImmediatePropagation();
    alert(e.isImmediatePropagationStopped());
});
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery 之 基础事件]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/13/jquery-zhi-ji-chu-shi-jian/"/>
    <updated>2015-10-13T21:42:16+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/13/jquery-zhi-ji-chu-shi-jian</id>
    <content type="html"><![CDATA[<p>在 JavaScript 课程的学习中,我们掌握了很多使用的事件,常用的事件有:<code>click、dblclick、mousedown、mouseup、mousemove、mouseover、mouseout、change、select、submit、keydown、 keypress、keyup、blur、focus、load、resize、scroll、error。</code>那么,还有更多的事件可以参考 手册中的事件部分。</p>

<h3>一、绑定事件</h3>

<p>jQuery 通过 <code>.bind()</code> 方法来为元素绑定这些事件。可以传递三个参数<code>bind(type, [data], fn),</code>  <code>type</code> 表示一个或多个类型的事件名字符串; <code>[data]</code> 是可选的,作为 <code>event.data</code> 属性值传递一个 额外的数据,这个数据是一个字符串、一个数字、一个数组或一个对象;fn 表示绑定到指 定元素的处理函数。</p>

<pre><code>    $('input').bind('click', function () {    //点击按钮后执行匿名函数
        alert('点击!'); 
    });
</code></pre>

<p>普通处理函数</p>

<pre><code>    $('input').bind('click', fn);       //执行普通函数式无须圆括号
        function fn() {
        alert('点击!'); 
    }
</code></pre>

<p>可以同时绑定多个事件
```
$(&lsquo;input&rsquo;).bind(&lsquo;mouseout mouseover&rsquo;, function () {    //移入和移出分别执行一次
    $(&lsquo;div&rsquo;).html(function (index, value) {
        return value + &lsquo;1&rsquo;;
    });
});</p>

<!--more-->


<pre><code>通过对象键值对绑定多个参数
</code></pre>

<p>$(&lsquo;input&rsquo;).bind({             传递一个对象
    &lsquo;mouseout&rsquo; : function () {     //事件名的引号可以省略
        alert(&lsquo;移出&rsquo;);
    },
    &lsquo;mouseover&rsquo; : function () {
        alert(&lsquo;移入&rsquo;);
    }
});</p>

<pre><code>
使用 unbind 删除绑定的事件

     $('input').unbind();

使用 unbind 参数删除指定类型事件 

    $('input').unbind('click');


`.mouseover()和.mouseout()` 表示鼠标移入和移出的时候触发。`.mouseenter()和.mouseleave()` 这组穿过,子元素不会触发。


`.keydown()、.keyup()`返回的是键码,而 `.keypress`  返回的是字符编码。 
</code></pre>

<pre><code>$('input').keydown(function (e) {
    alert(e.keyCode);
});
$('input').keypress(function (e) { 
    alert(e.charCode);
});
</code></pre>

<pre><code>`.focus()和.blur()` 分别表示光标激活和丢失,事件触发时机是当前元素。而`.focusin() 和.focusout()` 也表示光标激活和丢失,但事件触发时机可以是子元素。




## 二、复合事件
</code></pre>

<p>$(&lsquo;div&rsquo;).hover(function () {                    //mouseenter 效果
        $(this).css(&lsquo;background&rsquo;, &lsquo;black&rsquo;);
    }, function () {                            //mouseleave 效果  可省略
        $(this).css(&lsquo;background&rsquo;, &lsquo;red&rsquo;);
});
```</p>

<p>注意 : <code>.hover()</code> 方法是结合了 <code>.mouseenter()</code> 方法和 <code>.mouseleva()</code> 方法,并非 <code>.mouseover()</code> 和 <code>.mouseout()</code> 方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery 之 DOM节点操作]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/13/jquery-domjie-dian-cao-zuo/"/>
    <updated>2015-10-13T00:33:04+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/13/jquery-domjie-dian-cao-zuo</id>
    <content type="html"><![CDATA[<p>DOM 中有一个非常重要的功能,就是节点模型,也就是 DOM 中的“M”。</p>

<h3>一、创建节点</h3>

<p>为了使页面更加智能化,有时我们想动态的在 html 结构页面添加一个元素标签,那么在插入之前首先要做的动作就是:创建节点。
<code>
    var box = $('&lt;div id="box"&gt;节点&lt;/div&gt;');         //创建一个节点
    $('body').append(box);                           //将节点插入到&lt;body&gt;元素内部
</code></p>

<!--more-->


<h2>二、插入节点</h2>

<h4>> 内部插入节点方法:</h4>

<pre><code>    $('div').append('&lt;strong&gt;节点&lt;/strong&gt;');    //向 div 内部插入 strong 节点 
    $('div').append(function (index, html) {    //使用匿名函数插入节点,html 是原节点
        return '&lt;strong&gt;节点&lt;/strong&gt;';
    ￼￼});

    $('span').appendTo('div');                 //讲 span 节点移入 div 节点内
    $('span').appendTo($('div'));              //同上

    $('div').prepend('&lt;span&gt;节点&lt;/span&gt;');     //将 span 插入到 div 内部的前面 
    $('div').append(function (index, html) {  //使用匿名函数,同上
        return '&lt;span&gt;节点&lt;/span&gt;'; 
        });

    $('span').prependTo('div');               //将 span 移入 div 内部的前面
    $('span').prependTo($('div'));            //同上
</code></pre>

<h4>> 外部插入节点方法:</h4>

<pre><code>    $('div').after('&lt;span&gt;节点&lt;/span&gt;');           //向 div 的同级节点后面插入 span
    $('div').after(function (index, html) {       //使用匿名函数,同上
        return '&lt;span&gt;节点&lt;/span&gt;';
        });
    $('div').before('&lt;span&gt;节点&lt;/span&gt;');         //向 div 的同级节点前面插入 span
    $('div').before(function (index, html) { 
        return '&lt;span&gt;节点&lt;/span&gt;';
        }); 
    $('span').insertAfter('div');                //将 span 元素移到 div 元素外部的后面
    $('span').insertBefore('div');               //将 span 元素移到 div 元素外部的前面
</code></pre>

<h4>> 包裹节点</h4>

<pre><code>$('div').wrap('&lt;strong&gt;&lt;/strong&gt;');                   //在 div 外层包裹一层 strong
$('div').wrap('&lt;strong&gt;123&lt;/strong&gt;');                //包裹的元素可以带内容
$('div').wrap('&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;');          //包裹多个元素
$('div').wrap($('strong').get(0));                    //也可以包裹一个原生 DOM 
$('div').wrap(document.createElement('strong'));      //临时的原生DOM
$('div').wrap(function (index) {
    return '&lt;strong&gt;&lt;/strong&gt;'; 
    });
$('div').unwrap();                                    //移除一层包裹内容,多个需移除多次
$('div').wrapAll('&lt;strong&gt;&lt;/strong&gt;');                //所有 div 外面只包一层 strong
$('div').wrapAll($('strong').get(0)); 
$('div').wrapInner('&lt;strong&gt;&lt;/strong&gt;');              //向指定元素的子内容包裹一层 html 
$('div').wrapInner($('strong').get(0));               //DOM 节点
$('div').wrapInner(function () {
    return '&lt;strong&gt;&lt;/strong&gt;'; 
    });
</code></pre>

<h2>三、节点操作</h2>

<pre><code>$('body').append($('div').clone(true));     //复制一个节点添加到 HTML 中
</code></pre>

<p>注意 : <code>clone(true)</code> 参数可以为空,表示只复制元素和内容,不复制事件行为。而加上 <code>true</code> 参数的话,这个元素附带的事件处理行为也复制出来。</p>

<pre><code>$('div').remove(); //直接删除 div 元素
</code></pre>

<p>注意 : <code>.remove()</code> 不带参数时,删除前面对象选择器指定的元素。而<code>.remove()</code> 也可以 带选择符参数的,比如 :<code>$('div').remove('#box');</code> 只删除 <code>id=box</code>  的<code>div。</code></p>

<pre><code>$('div').detach(); //保留事件行为的删除
</code></pre>

<p>注意 : <code>.remove()</code> 和 <code>.detach()</code> 都是删除节点,而删除后本身方法可以返回当前被删除的节 点对象,但区别在于前者在恢复时不保留事件行为,后者则保留。</p>

<pre><code>$('div').empty();   //删除掉节点里的内容
</code></pre>

<pre><code>    $('div').replaceWith('&lt;span&gt;节点&lt;/span&gt;');      //将 div 替换成 span 元素
    $('&lt;span&gt;节点&lt;/span&gt;').replaceAll('div');        //同上
</code></pre>

<p>注意 : 节点被替换后,所包含的事件行为就全部消失了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery 之 基础DOM操作]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/10/jquery-zhi-ji-chu-domhe-csscao-zuo/"/>
    <updated>2015-10-10T21:00:03+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/10/jquery-zhi-ji-chu-domhe-csscao-zuo</id>
    <content type="html"><![CDATA[<h3>一、设置元素及内容</h3>

<p>在常规的 DOM 元素中,使用 html()和 text()方法获取内部的数据。
<code>
    $('#box').html();                       //获取 html 内容
    $('#box').text();                       //获取文本内容,会自动清理 html 标签
    $('#box').html('&lt;em&gt;www.li.cc&lt;/em&gt;');   //设置 html 内容
    $('#box').text('&lt;em&gt;www.li.cc&lt;/em&gt;');   //设置文本内容,会自动转义 html 标签
</code>
使用 html()或 text()设置元素里的内容时,会清空原来的数据。而我们期 望能够追加数据的话,需要先获取原本的数据。</p>

<pre><code>$('#box').html($('#box').html() + '&lt;em&gt;www.li.cc&lt;/em&gt;'); //追加数据
</code></pre>

<p>如果元素是表单的话,jQuery 提供了 <code>val()</code>方法进行获取或设置内部的文本数据。</p>

<pre><code>$('input').val(); //获取表单内容 
$('input').val('www.li.cc'); //设置表单内容
</code></pre>

<p>如果想设置多个选项的选定状态,比如下拉列表、单选复选框等等,可以通过数组传递 操作。</p>

<pre><code>$("input").val(["check1","check2", "radio1" ]); //value 值是这些的将被选定
</code></pre>

<!--more-->


<h2>二、元素属性操作</h2>

<p>除了对元素内容进行设置和获取,通过 jQuery 也可以对元素本身的属性进行操作,包 括获取属性的属性值、设置属性的属性值,并且可以删除掉属性。</p>

<pre><code>$('div').attr('title');                            //获取属性的属性值
$('div').attr('title', '我是域名');                 //设置属性及属性值 
$('div').attr('title', function () {               //通过匿名函数返回属性值
    return '我是域名';});
$('div').attr('title', function (index, value) {  
    return value + (index+1) + ',我是域名';          //可以接受两个参数
});
</code></pre>

<p>注意: <code>attr()</code>方法里的 <code>function() {},</code>可以不传参数。可以只传一个参数 index,表示当前 元素的索引(从 0 开始)。也可以传递两个参数 index、value,第二个参数表示属性原本的值。</p>

<p>注意: jQuery 中很多方法都可以使用 <code>function() {}</code>来返回出字符串,比如<code>html()、text()、 val()</code>和上一章刚学过的 <code>is()、filter()</code>方法。而如果又涉及到多个元素集合的话,还可以传递 <code>index</code> 参数来获取索引值,并且可以使用第二个参数 <code>value</code>(并不是所有方法都适合,有兴趣 可以自己逐个尝试)。</p>

<pre><code>$('div').html(function (index) { //通过匿名函数赋值,并传递 index 
    return '我是' + (index+1) + '号 div';
});
$('div').html(function (index, value) { //还可以实现追加内容
     return '我是' + (index+1) + '号 div:'+value ;
});
$('div').removeAttr('title'); //这个方法就不可以使用匿名函数,传递 index 和 value 均无效。
</code></pre>

<h2>三、元素样式操作</h2>

<p>元素样式操作包括了直接设置 CSS 样式、增加 CSS 类别、类别切换、删除类别这几种操作方法。</p>

<pre><code>    $('div').css('color');                   //获取元素行内 CSS 样式的颜色 
    $('div').css('color', 'red');           //设置元素行内 CSS 样式颜色为红色
</code></pre>

<p>也可以获取多个 CSS 样式,而获取到的是一个对象数组,如果用 传统方式进行解析需要使用 for in 遍历。</p>

<pre><code>var box = $('div').css(['color', 'height', 'width']);              //得到多个 CSS 样式的数组对象 
    for (var i in box) {                                           //逐个遍历出来
    alert(i + ':' + box[i]); }
</code></pre>

<p>jQuery 提供了一个遍历工具专门来处理这种对象数组,<code>$.each()</code>方法,这个方法可以轻 松的遍历对象数组。</p>

<pre><code>$.each(box, function (attr, value) { //遍历 JavaScript 原生态的对象数组 
    alert(attr + ':' + value);
});
</code></pre>

<p>使用<code>$.each()</code>可以遍历原生的 JavaScript 对象数组,如果是 jQuery 对象的数组怎么使 用<code>.each()</code>方法呢?</p>

<pre><code>$('div').each(function (index, element) { //index 为索引,element 为元素 DOM 
    alert(index + ':' + element);
});
</code></pre>

<p>在需要设置多个样式的时候,我们可以传递多个 CSS 样式的键值对即可。
<code>
     $('div').css({
            'background-color' : '#ccc',
            'color' : 'red',
            font-size' : '20px'
        });
</code>
 CSS 类的样式切换功能。</p>

<pre><code>$('div').click(function () { //当点击后触发
    $(this).toggleClass('red size'); //单个样式多个样式均可 
    });
</code></pre>

<pre><code>    $('div').click(function () { 
        $(this).toggleClass(function () {
            if ($(this).hasClass('red')) { 
                $(this).removeClass('red'); 
                return 'green';
            } else { 
                $(this).removeClass('green');
                return 'red';
            } 
        });
    });
</code></pre>

<h2>四、CSS 方法</h2>

<p>jQuery 不但提供了 CSS 的核心操作方法,比如.css()、.addClass()等。还封装了一些特殊功能的 CSS 操作方法,我们分别来了解一下。</p>

<pre><code>$('div').width();                          //获取元素的长度,返回的类型为number 
$('div').width(500);                       //设置元素长度,直接传数值,默认加 px  
$('div').width('500pt');                   //同上,设置了 pt 单位
$('div').width(function (index, value) {   //index 是索引,value 是原本值 
    return value - 500;                    //无须调整类型,直接计算
});
</code></pre>

<p><code>height()</code>方法同上。</p>

<h4>内外边距和边框尺寸方法</h4>

<pre><code>    alert($('div').width());           //获取元素宽度 不包含
    alert($('div').innerWidth());      //包含内边距 padding
    alert($('div').outerWidth());      //包含内边距 padding+边框 border
    alert($('div').outerWidth(true));  //包含内边距 padding+边框 border+外边距 margin
</code></pre>

<h4>元素偏移方法</h4>

<pre><code>    $('strong').offset().left;       //获取某个元素相对于视口的偏移位置
    $('strong').position().left;     //相对于父元素的偏移
    $(window).scrollTop();           //获取当前滚动条的位置
    $(window).scrollTop(300);        //设置当前滚动条的位置
</code></pre>
]]></content>
  </entry>
  
</feed>
