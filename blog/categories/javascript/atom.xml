<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | 云端笔记]]></title>
  <link href="http://amy-liu.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://amy-liu.github.io/"/>
  <updated>2015-10-17T23:31:09+08:00</updated>
  <id>http://amy-liu.github.io/</id>
  <author>
    <name><![CDATA[amy-liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript 之 数据类型]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/17/javascript-zhi-shu-ju-lei-xing/"/>
    <updated>2015-10-17T23:23:46+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/17/javascript-zhi-shu-ju-lei-xing</id>
    <content type="html"><![CDATA[<p>ECMAScript 中有 5 种简单数据类型:<code>Undefined、Null、Boolean、Number 和 String。</code> 还有一种复杂数据类型——<code>Object</code>。ECMAScript 不支持任何创建自定义类型的机制,所有 值都成为以上 6 中数据类型之一。</p>

<h3>一、typeof 操作符</h3>

<p><code>typeof</code> 操作符是用来检测变量的数据类型 。对于值或变量使用 <code>typeof</code> 操作符会返回如下字符串。
<code>
    undefined  未定义
    boolean    布尔值
    string     字符串
    number     数值
    object     对象或 null
    function   函数
</code></p>

<p>typeof 操作符可以操作变量,也可以操作字面量。虽然也可以这样使用: typeof(box), 但,typeof 是操作符而非内置函数。PS:函数在 ECMAScript 中是对象,不是一种数据类型。 所以,使用 typeof 来区分 function 和 object 是非常有必要的。</p>

<pre><code>alert(typeof box);
</code></pre>

<!--more-->


<h2>二、Undefined 类型</h2>

<p><code>Undefined</code> 类型只有一个值,即特殊的 undefined。在使用 var 声明变量,但没有对其初 始化时,这个变量的值就是 <code>undefined</code> 。</p>

<pre><code>var box; 
alert(box);
</code></pre>

<p>PS:我们没有必要显式的给一个变量赋值为 <code>undefined</code> ,因为没有赋值的变量会隐式的 (自动的)赋值为 <code>undefined</code> ;而 <code>undefined</code> 主要的目的是为了用于比较 ,ECMAScript 第 3 版之 前并没有引入这个值,引入之后为了正式区分空对象与未经初始化的变量。</p>

<p>未初始化的变量与根本不存在的变量 (未声明的变量)也是不一样的。</p>

<pre><code>var box;
alert(age); //age is not defined
</code></pre>

<p>PS : 如果 <code>typeof box,typeof age</code> 都返回的 undefined。从逻辑上思考,他们的值,一个 是 undefined,一个报错;他们的类型,却都是 undefined。所以,我们在定义变量的时候, 尽可能的不要只声明,不赋值。</p>

<h2>三、Null 类型</h2>

<p>Null 类型是一个只有一个值的数据类型,即特殊的值 null。它表示一个空对象引用(指 针),而 typeof 操作符检测 null 会返回 object。</p>

<pre><code>var box = null; 
alert(typeof box);
</code></pre>

<p>如果定义的变量准备在将来用于保存对象,那么最好将该变量初始化为 null。这样,当 检查 null 值就知道是否已经变量是否已经分配了对象引用了。</p>

<pre><code>var box = null; 
if (box != null) {
    alert('box 对象已存在!'); 
}
</code></pre>

<p>有个要说明的是:undefined 是派生自 null 的,因此 ECMA-262 规定对它们的相等性测 试返回 true。</p>

<p>alert(undefined == null);</p>

<p>由于 <code>undefined</code> 和 <code>null</code> 两个值的比较是相等的,所以,未初始化的变量和赋值为 null 的 变量会相等。这时,可以采用 typeof 变量的类型进行比较。但,建议还是养成编码的规范, 不要忘记初始化变量。
<code>
var box;
var car = null;
alert(typeof box == typeof car)
</code></p>

<h2>四、Boolean</h2>

<p>Boolean 类型有两个值(字面量):<code>true</code> 和 <code>false</code>。而 <code>true</code> 不一定等于 1,<code>false</code> 不一定等于 0。 JavaScript 是区分大小写的,True 和 False 或者其他都不是 Boolean 类型的值。</p>

<pre><code>var box = true; 
alert(typeof box);
</code></pre>

<p>虽然 Boolean 类型的字面量只有 true 和 false 两种,但 ECMAScript 中所有类型的值都有 与这两个 Boolean 值等价的值。要将一个值转换为其对应的 Boolean 值,可以使用转型函数 <code>Boolean()</code>。</p>

<pre><code>var hello = 'Hello World!'; 
var hello2 = Boolean(hello); 
alert(typeof hello);
</code></pre>

<p>上面是一种显示转换 ,属于强制性转换 。而实际应用中 ,还有一种隐式转换 。比如,在 if 条件语句里面的条件判断,就存在隐式转换。</p>

<pre><code>var hello = 'Hello World!';
if (hello) {
    alert('如果条件为 true,就执行我这条!'); 
    } else {
    alert('如果条件为 false,就执行我这条!'); 
    }
</code></pre>

<p>以下是其他类型转换成 Boolean 类型规则</p>

<pre><code>数据类型      转换为 true 的值             转换为 false 的值
Boolean     true                         false
String      任何非空字符串                 空字符串
Number      任何非零数字值 (包括无穷大 )     0 和 NaN
Object      任何对象                       null
Undefined                                 undefined
</code></pre>

<h2>五、Number 类型</h2>

<p>Number 类型包含两种数值:整型和浮点型。为了支持各种数值类型, ECMA-262 定义了不同的数值字面量格式。
最基本的数值字面量是十进制整数。</p>

<pre><code>var box = 100; //十进制整数
</code></pre>

<h2>六、String 类型</h2>

<p>String 类型用于表示由于零或多个 16 位 Unicode 字符组成的字符序列,即字符串。字 符串可以由双引号(&ldquo;)或单引号(&lsquo;)表示。</p>

<pre><code>var box = 'Lee'; 
var box = "Lee";
</code></pre>

<p>PS:在某些其他语言(PHP)中,单引号和双引号表示的字符串解析方式不同, 而 ECMAScript 中,这两种表示方法没有任何区别。但要记住的是,必须成对出现,不能穿插 使用,否则会出错。</p>

<p>String 类型包含了一些特殊的字符字面量,也叫转义序列。</p>

<pre><code>\n  换行
\t  制表
\b  空格
\r  回车
\f  进纸
\\  斜杠
\'  单引号
\"  双引号
\xnn    以十六进制代码 nn 表示的一个字符(0~F)。例:\x41
\unnn   以十六进制代码 nnn 表示的一个 Unicode 字符(0~F)。例:\u03a3
</code></pre>

<p>字符串一旦创建,它们的值就不能改 变。要改变某个变量保存的字符串 ,首先要销毁原来的字符串 ,然后再用另一个包含新值的 字符串填充该变量。</p>

<pre><code>var box = 'Mr.'; 
box = box + ' Lee';
</code></pre>

<p><code>toString()</code>方法可以把值转换成字符串。</p>

<pre><code>var box = 11;
var box = true;
alert(typeof box.toString());
</code></pre>

<p><code>toString()</code>方法一般是不需要传参的,但在数值转成字符串的时候,可以传递进制参数 。</p>

<pre><code>var box = 10;
alert(box.toString());   //10,默认输出 
alert(box.toString(2));   //1010,二进制输出
alert(box.toString(8));    //12,八进制输出
alert(box.toString(10));   //10,十进制输出
alert(box.toString(16));   //a,十六进制输出
</code></pre>

<p>如果在转型之前不知道变量是否是 null 或者 undefined 的情况下,我们还可以使用转型 函数 <code>String()</code> ,这个函数能够将任何类型的值转换为字符串。</p>

<p>var box = null;
alert(String(box));</p>

<p>PS:如果值有 <code>toString()</code> 方法,则调用该方法并返回相应的结果;如果是 null 或者 undefined,则返回"null"或者"undeinfed"。</p>

<h2>七、Object 类型</h2>

<p>ECMAScript 中的对象其实就是一组数据和功能的集合 。对象可以通过执行 new 操作符 后跟要创建的对象类型的名称来创建。</p>

<pre><code>var box = new Object();
</code></pre>

<p><code>Object()</code>是对象构造,如果对象初始化时不需要传递参数,可以不用写括号,但这种方 式我们是不推荐的。</p>

<pre><code>var box = new Object;
</code></pre>

<p>Object()里可以任意传参,可以传数值、字符串、布尔值等。而且,还可以进行相应的 计算。</p>

<pre><code>var box = new Object(2);             //Object 类型,值是 2
var age = box + 2;                  //可以和普通变量运算 
alert(age);                        //输出结果,转型成 Number 类型了
</code></pre>

<p>既然可以使用 new Object()来表示一个对象,那么我们也可以使用这种 new 操作符来创 建其他类型的对象。</p>

<pre><code>var box = new Number(5); //new String('Lee')、new Boolean(true) 
alert(typeof box); //Object 类型
</code></pre>

<p>PS:面向对象是 JavaScript 课程的重点,这里我们只是简单做个介绍 。</p>
]]></content>
  </entry>
  
</feed>
