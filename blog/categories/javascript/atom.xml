<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | 云端笔记]]></title>
  <link href="http://amy-liu.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://amy-liu.github.io/"/>
  <updated>2015-11-02T23:11:06+08:00</updated>
  <id>http://amy-liu.github.io/</id>
  <author>
    <name><![CDATA[amy-liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript - Ajax]]></title>
    <link href="http://amy-liu.github.io/blog/2015/11/02/javascript-ajax/"/>
    <updated>2015-11-02T23:10:06+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/11/02/javascript-ajax</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript - JSON]]></title>
    <link href="http://amy-liu.github.io/blog/2015/11/02/javascript-json/"/>
    <updated>2015-11-02T23:05:43+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/11/02/javascript-json</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript - 匿名函数和闭包]]></title>
    <link href="http://amy-liu.github.io/blog/2015/11/02/javascript-ni-ming-han-shu-he-bi-bao/"/>
    <updated>2015-11-02T22:28:19+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/11/02/javascript-ni-ming-han-shu-he-bi-bao</id>
    <content type="html"><![CDATA[<p>匿名函数就是没有名字的函数,闭包是可访问一个函数作用域里变量的函数。</p>

<h3>一、匿名函数</h3>

<pre><code>function () {                 //匿名函数
    return 'Lee'; 
}
</code></pre>

<pre><code>
    function box () {                    //函数里的匿名函数 
        return function () {            //函数里的匿名函数,产生闭包
            return 'Lee';
        } 
    }
    alert(box()());                   //调用匿名函数
</code></pre>

<h2>二、闭包</h2>

<p>闭包是指有权访问另一个函数作用域中的变量的函数 ,创建闭包的常见的方式,就是在一个函数内部创建另一个函数,通过另一个函数访问这个函数的局部变量。</p>

<pre><code>    function box() {
        var user = 'Lee'; 
        return function () {           //通过匿名函数返回 box()局部变量
            return user; 
            };
        } 
    alert(box()());                   //通过 box()()来直接调用匿名函数返回值
    var b = box();                    //另一种调用匿名函数返回值
    alert(b());
</code></pre>

<!--more-->


<p>使用闭包有一个优点 ,也是它的缺点 :就是可以把局部变量驻留在内存中 ,可以避免使 用全局变量。 (全局变量污染导致应用程序不可预测性,每个模块都可调用必将引来灾难, 所以推荐使用私有的,封装的局部变量 )。</p>

<p>//通过全局变量来累加</p>

<pre><code>var age = 100;                   //全局变量 
function box() {
    age ++;                     //模块级可以调用全局变量,进行累加
}
box();                          //执行函数,累加了
alert(age);                     //输出全局变量
</code></pre>

<p>//通过局部变量无法实现累加</p>

<pre><code>function box() {
    var age = 100;              
    age ++;                   //累加
    return age;
}
alert(box());                 //101
alert(box());                 //101,无法实现,因为又被初始化了
</code></pre>

<p>//通过闭包可以实现局部变量的累加
<code>
    function box() {
        var age = 100;
        return function () {
            age ++;
            return age;
            }
        }
        var b = box();             //获得函数
        alert(b());                //调用匿名函数
        alert(b());                //第二次调用匿名函数,实现累加
</code></p>

<p>PS:由于闭包里作用域返回的局部变量资源不会被立刻销毁回收,所以可能会占用更 多的内存。过度使用闭包会导致性能下降,建议在非常有必要的时候才使用闭包。</p>

<p>作用域链的机制导致一个问题,在循环中里的匿名函数取得的任何变量都是最后一个 值。</p>

<p>//循环里包含匿名函数
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function box() {
</span><span class='line'>    var arr = [];
</span><span class='line'>    for (var i = 0; i &lt; 5; i++) {
</span><span class='line'>    arr[i] = function () {
</span><span class='line'>    return i;
</span><span class='line'>    };
</span><span class='line'>}
</span><span class='line'>return arr;                  &lt;br/&gt;
</span><span class='line'>}
</span><span class='line'>var b = box();              //得到函数数组
</span><span class='line'>alert(b.length);            //得到函数集合长度&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;for (var i = 0; i &lt; b.length; i++) {
</span><span class='line'>alert(b[i]());                            //输出每个函数的值,都是最后一个值
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;上面的例子输出的结果都是 5,也就是循环后得到的最大的 i 值。因为 `b[i]` 调用的是匿 名函数,匿名函数并没有自我执行,等到调用的时候, `box()`已执行完毕,i 早已变成 5,所 以最终的结果就是 5 个 5。
</span><span class='line'>
</span><span class='line'>//循环里包含匿名函数-改  1,自我执行匿名函数 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;function box() {
</span><span class='line'>var arr = [];
</span><span class='line'>for (var i = 0; i &lt; 5; i++) { 
</span><span class='line'>    arr[i] = (function (num) {          //自我执行 
</span><span class='line'>        return num; 
</span><span class='line'>        })(i);                          //并且传参
</span><span class='line'>}
</span><span class='line'>return arr;
</span><span class='line'>}
</span><span class='line'>var b = box();
</span><span class='line'>for (var i = 0; i &lt; b.length; i++) {
</span><span class='line'>alert(b[i]); //这里返回的是数组,直接打印即可 
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>改1中,我们让匿名函数进行自我执行,导致最终返回给 a[i]的是数组而不是函数了。 最终导致 b[0]-b[4]中保留了 0,1,2,3,4 的值。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>关于 this 对象    
</span><span class='line'>在闭包中使用 `this` 对象也可能会导致一些问题 ,`this` 对象是在运行时基于函数的执行环 境绑定的,如果 this 在全局范围就是 window,如果在对象内部就指向这个对象。而闭包却 在运行时指向 window 的,因为闭包并不属于这个对象的属性或方法。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;var user = 'The Window';
</span><span class='line'>var obj = {
</span><span class='line'>user : 'The Object',
</span><span class='line'>getUserFunction : function () { 
</span><span class='line'>    return function () {               //闭包不属于 obj,里面的 this 指向 window
</span><span class='line'>    return this.user;
</span><span class='line'>    }; 
</span><span class='line'>    }
</span><span class='line'>}; 
</span><span class='line'>alert(obj.getUserFunction()());            //The window
</span><span class='line'>
</span><span class='line'>alert(obj.getUserFunction().call(obj));    //可以强制指向某个对象
</span><span class='line'>
</span><span class='line'>getUserFunction : function () {           //也可以从上一个作用域中得到对象
</span><span class='line'>var that = this;                     /从对象的方法里得对象
</span><span class='line'>return function () {
</span><span class='line'>return that.user; };
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;内存泄漏&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;由于 IE 的 JScript 对象和 DOM 对象使用不同的垃圾收集方式 ,因此闭包在 IE 中会导致 一些问题。就是内存泄漏的问题 ,也就是无法销毁驻留在内存中的元素 。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;function box() {
</span><span class='line'>var oDiv = document.getElementById('oDiv');             //oDiv 用完之后一直驻留在内存 
</span><span class='line'>oDiv.onclick = function () {
</span><span class='line'>alert(oDiv.innerHTML);                                 //这里用 oDiv 导致内存泄漏
</span><span class='line'>
</span><span class='line'>}; }
</span><span class='line'>box();
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;那么在最后应该将 oDiv 解除引用来避免内存泄漏。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;function box() {
</span><span class='line'>var oDiv = document.getElementById('oDiv'); 
</span><span class='line'>var text = oDiv.innerHTML;
</span><span class='line'>oDiv.onclick = function () {
</span><span class='line'>    alert(text); 
</span><span class='line'>    };
</span><span class='line'>oDiv = null;          //解除引用
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;PS:如果并没有使用解除引用,那么需要等到浏览器关闭才得以释放。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[JavaScript 之 面向对象与原型]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://amy-liu.github.io/blog/2015/10/28/jaxiang-dui-xiang-yu-yuan-xing/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-10-28T23:46:09+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://amy-liu.github.io/blog/2015/10/28/jaxiang-dui-xiang-yu-yuan-xing&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;ECMAScript 有两种开发模式:1.函数式(过程化),2.面向对象(OOP)。面向对象的语言 有一个标志,那就是类的概念,而通过类可以创建任意多个具有相同属性和方法的对象 。但 是,ECMAScript 没有类的概念,因此它的对象也与基于类的语言中的对象有所不同。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;一、创建对象&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;创建一个对象,然后给这个对象新建属性和方法。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>var box = new Object();            //创建一个 Object 对象
</span><span class='line'>box.name = 'Lee';                  //创建一个 name 属性并赋值
</span><span class='line'>box.age = 100;                     //创建一个 age 属性并赋值
</span><span class='line'>box.run = function () {            //创建一个 run()方法并返回值
</span><span class='line'>    return this.name + this.age + '运行中...';
</span><span class='line'>};
</span><span class='line'>alert(box.run()); //输出属性和方法的值
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>上面创建了一个对象,并且创建属性和方法,在 run()方法里的 this,就是代表 box 对象 本身。这种是 JavaScript 创建对象最基本的方法,但有个缺点,想创建一个类似的对象 ,就 会产生大量的代码。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;为了解决多个类似对象声明的问题 ,我们可以使用一种叫做 工厂模式的方法,这种方法 就是为了解决实例化对象产生大量重复的问题。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>function createObject(name, age) { //集中实例化的函数 var obj = new Object();
</span><span class='line'>    obj.name = name;
</span><span class='line'>    obj.age = age;
</span><span class='line'>    obj.run = function () {
</span><span class='line'>        return this.name + this.age + '运行中...';
</span><span class='line'>    };
</span><span class='line'>        return obj;
</span><span class='line'>    }
</span><span class='line'>var box1 = createObject('Lee', 100);
</span><span class='line'>var box2 = createObject('Jack', 200);
</span><span class='line'>alert(box1.run());
</span><span class='line'>alert(box2.run());
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>工厂模式解决了重复实例化的问题 ,但还有一个问题,那就是识别问题,因为根本无法 搞清楚他们到底是哪个对象的实例。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;alert(typeof box1);             //Object 
</span><span class='line'>alert(box1 instanceof Object);  //true
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ECMAScript 中可以采用构造函数(构造方法)可用来创建特定的对象。</span></code></pre></td></tr></table></div></figure>
    function Box(name, age) { //构造函数模式
        this.name = name;
        this.age = age;
        this.run = function () {
            return this.name + this.age + &lsquo;运行中&hellip;&rsquo;; };
        }
    var box1 = new Box(&lsquo;Lee&rsquo;, 100); //new Box()即可
    var box2 = new Box(&lsquo;Jack&rsquo;, 200);</p>

<pre><code>alert(box1.run());
alert(box1 instanceof Box); //很清晰的识别他从属于 Box
</code></pre>

<pre><code>使用构造函数的方法 ,即解决了重复实例化的问题 ,又解决了对象识别的问题,构造函数的方法有一些规范:

- 函数名和实例化构造名相同且大写, (PS:非强制,但这么写有助于区分构造函数和 普通函数);    
- 通过构造函数创建对象,必须使用 new 运算符。    

既然通过构造函数可以创建对象,那么这个对象是哪里来的, `new Object()`在什么地方 执行了?执行的过程如下:

- 当使用了构造函数,并且 new 构造函数(),那么就后台执行了 `new Object()`;    
- 将构造函数的作用域给新对象 ,(即 `new Object()`创建出的对象),而函数体内的 `this` 就 代表 `new Object()`出来的对象。    
- 执行构造函数内的代码;     
- 返回新对象(后台直接返回)。       

关于 `this` 的使用,`this` 其实就是代表当前作用域对象的引用 。如果在全局范围 this 就代 表 window 对象,如果在构造函数体内,就代表当前的构造函数所声明的对象。

    var box = 2;
    alert(this.box); //全局,代表 window

构造函数和普通函数的唯一区别 ,就是他们调用的方式不同 。只不过,构造函数也是函 数,必须用 new 运算符来调用,否则就是普通函数。

    var box = new Box('Lee', 100);           //构造模式调用
    alert(box.run());

    Box('Lee', 20);                          //普通模式调用,无效

    var o = new Object(); 
    Box.call(o, 'Jack', 200)                //对象冒充调用
    alert(o.run());  


可以把构造函数里的方法(或函数)用 new Function()方法来代替,得到一样的效果,更加证明,他们最终判断的是引用地址,唯一性。

    function Box(name, age) { //new Function()唯一性
        this.name = name;
        this.age = age;
        this.run = new Function("return this.name + this.age + '运行中...'");
    }


虽然使用了全局的函数 run()来解决了保证引用地址一致的问题,但这种方式又带来了 一个新的问题,全局中的 this 在对象调用的时候是 Box 本身,而当作普通函数调用的时候 , this 又代表 window。



## 二、原型

我们创建的每个函数都有一个 `prototype(原型)` 属性,这个属性是一个对象,它的用途是包含可以由特定类型的所有实例共享的属性和方法。逻辑上可以这么理解: `prototype` 通过 调用构造函数而创建的那个对象的原型对象 。使用原型的好处可以让所有对象实例共享它所 包含的属性和方法。也就是说,不必在构造函数中定义对象信息 ,而是可以直接将这些信息 添加到原型中。


    function Box() {}                   //声明一个构造函数
    Box.prototype.name = 'Lee';         //在原型里添加属性
    Box.prototype.age = 100; 
    Box.prototype.run = function () {   //在原型里添加方法
        return this.name + this.age + '运行中...'; 
        };

比较一下原型内的方法地址是否一致:

    var box1 = new Box();
    var box2 = new Box();
    alert(box1.run == box2.run);   //true,方法的引用地址保持一致

为了更进一步了解构造函数的声明方式和原型模式的声明方式 ,我们通过图示来了解一 下:

![proto](/images/proto.jpg)


在原型模式声明中,多了两个属性,这两个属性都是创建对象时自动生成的 。`__proto__` 属性是实例指向原型对象的一个指针,它的作用就是指向构造函数的原型属性 `constructor`。 通过这两个属性,就可以访问到原型里的属性和方法了。    
PS:IE 浏览器在脚本访问`__proto__` 会不能识别,火狐和谷歌浏览器及其他某些浏览器 均能识别。虽然可以输出,但无法获取内部信息。

    alert(box1.__proto__); //[object Object]


判断一个对象是否指向了该构造函数的原型对象 ,可以使用 `isPrototypeOf()`方法来测试。 

    alert(Box.prototype.isPrototypeOf(box)); //只要实例化对象,即都会指向

原型模式的执行流程: 

1.先查找构造函数实例里的属性或方法,如果有,立刻返回;     
2.如果构造函数实例里没有,则去它的原型对象里找,如果有,就返回;

虽然我们可以通过对象实例访问保存在原型中的值 ,但却不能访问通过对象实例重写原 型中的值。


如何判断属性是在构造函数的实例里,还是在原型里?可以使用 hasOwnProperty()函数 来验证:

    alert(box.hasOwnProperty('name')); //实例里有返回 true,否则返回 false



为了让属性和方法更好的体现封装的效果 ,并且减少不必要的输入 ,原型的创建可以使 用字面量的方式:

    function Box() {};
    Box.prototype = {        //使用字面量的方式
        name : 'Lee',
        age : 100,
        run : function () {
        return this.name + this.age + '运行中...'; 
        }
    };


使用构造函数创建原型对象和使用字面量创建对象在使用上基本相同 ,但还是有一些区 别,字面量创建的方式使用 `constructor` 属性不会指向实例,而会指向 `Object`,构造函数创建 的方式则相反。

    var box = new Box();
    alert(box instanceof Box);      
    alert(box instanceof Object); 
    alert(box.constructor == Box);              //字面量方式,返回 false,否则,true
    alert(box.constructor == Object);           //字面量方式,返回 true,否则,false

如果想让字面量方式的 `constructor` 指向实例对象,那么可以这么做: 

    Box.prototype = {
        constructor : Box, //直接强制指向即可 
    };


PS:字面量方式为什么 `constructor` 会指向 Object?因为 `Box.prototype={}`;这种写法其实 就是创建了一个新对象。而每创建一个函数,就会同时创建它 `prototype`,这个对象也会自 动获取 `constructor` 属性。所以,新对象的 `constructor` 重写了 Box 原来的 `constructor,`因此会 指向新对象,那个新对象没有指定构造函数,那么就默认为 Object。



####原型模式创建对象也有自己的缺点 ,它省略了构造函数传参初始化这一过程 ,带来的缺 点就是初始化的值都是一致的。而原型最大的缺点就是它最大的优点,那就是共享。
原型中所有属性是被很多实例共享的 ,共享对于函数非常合适 ,对于包含基本值的属性 也还可以。但如果属性包含引用类型,就存在一定的问题:
</code></pre>

<pre><code>function Box() {}; Box.prototype = {
    constructor : Box,
    name : 'Lee',
    age : 100,
    family : ['父亲', '母亲', '妹妹'],       //添加了一个数组属性
    run : function () {

    return this.name + this.age + this.family;
    } 
};
var box1 = new Box();
box1.family.push('哥哥');          //在实例中添加'哥哥' 
alert(box1.run());


var box2 = new Box();
alert(box2.run());           //共享带来的麻烦,也有 '哥哥'了
</code></pre>

<pre><code>
PS:数据共享的缘故,导致很多开发者放弃使用原型,因为每次实例化出的数据需要 保留自己的特性,而不能共享。



为了解决构造传参和共享问题,可以 组合构造函数+原型模式:
</code></pre>

<pre><code>function Box(name, age) {                     //不共享的使用构造函数
    this.name = name;
    this.age = age;
    this. family = ['父亲', '母亲', '妹妹']; 
    };
Box.prototype = { constructor : Box,          //共享的使用原型模式
    run : function () {
    return this.name + this.age + this.family;
} 
};
</code></pre>

<pre><code>

PS:这种混合模式很好的解决了传参和引用共享的大难题 。是创建对象比较好的方法。

原型模式,不管你是否调用了原型中的共享方法 ,它都会初始化原型中的方法 ,并且在 声明一个对象时,构造函数+原型部分让人感觉又很怪异 ,最好就是把构造函数和原型封装 到一起。为了解决这个问题,我们可以使用 动态原型模式。
</code></pre>

<pre><code>function Box(name ,age) {                       //将所有信息封装到函数体内 
    this.name = name;
    this.age = age;
    if (typeof this.run != 'function') {            //仅在第一次调用的初始化 
        Box.prototype.run = function () {
            return this.name + this.age + '运行中...'; 
            };
    } 
    }
var box = new Box('Lee', 100); 
alert(box.run());
</code></pre>

<pre><code>当第一次调用构造函数时, `run()`方法发现不存在,然后初始化原型。当第二次调用 ,就 不会初始化 ,并且第二次创建新对象 ,原型也不会再初始化了 。这样及得到了封装 ,又实现 了原型方法共享,并且属性都保持独立。

PS:使用动态原型模式,要注意一点,不可以再使用字面量的方式重写原型,因为会 切断实例和新原型之间的联系。


## 四、继承

继承是面向对象中一个比较核心的概念 。其他正统面向对象语言都会用两种方式实现继 承:一个是接口实现,一个是继承。而 ECMAScript 只支持继承,不支持接口实现,而实现 继承的方式依靠原型链完成。


    function Box() {                   //Box 构造
        this.name = 'Lee';
    }

    function Desk() {                  //Desk 构造
        this.age = 100;
    }

    Desk.prototype = new Box();       //Desc 继承了 Box,通过原型,形成链条


    var desk = new Desk(); 

    alert(desk.age);                    //得到被继承的属性
    alert(desk.name);


在 JavaScript 里,被继承的函数称为超类型 (父类,基类也行,其他语言叫法 ),继承的 函数称为子类型(子类,派生类)。继承也有之前问题,比如字面量重写原型会中断关系 ,使 用引用类型的原型,并且子类型还无法给超类型传递参数。

为了解决引用共享和超类型无法传参的问题,我们采用一种叫借用构造函数的技术 ,或 者成为对象冒充 (伪造对象、经典继承 )的技术来解决这两种问题。
</code></pre>

<pre><code>function Box(age) {
    this.name = ['Lee', 'Jack', 'Hello'] 
    this.age = age;
}

function Desk(age) { 

    Box.call(this, age);           //对象冒充,给超类型传参
}


var desk = new Desk(200); 
alert(desk.age); 
alert(desk.name); 
desk.name.push('AAA');             //添加的新数据,只给 desk
alert(desk.name);
</code></pre>

<pre><code>


借用构造函数虽然解决了刚才两种问题 ,但没有原型,复用则无从谈起。所以,我们需 要原型链+借用构造函数的模式,这种模式成为组合继承。

    function Box(age) {
        this.name = ['Lee', 'Jack', 'Hello'] 
        this.age = age;
    }

    Box.prototype.run = function () { 
        return this.name + this.age;
    };

    function Desk(age) { 
        Box.call(this, age);               //对象冒充            //第二次调用 Box
    }

    Desk.prototype = new Box();            //原型链继承          //第一次调用 Box
    var desk = new Desk(100); 
    alert(desk.run());

组合式继承是 JavaScript 最常用的继承模式;但,组合式继承也有一点小问题,就是超 类型在使用过程中会被调用两次 :一次是创建子类型的时候 ,另一次是在子类型构造函数的 内部。


那么 寄生组合继承 ,解决了两次调用的问题。
</code></pre>

<pre><code>function obj(o) { 

    function F() {}
    F.prototype = o;
    return new F(); 
}

function create(box, desk) { 
    var f = obj(box.prototype); 
    f.constructor = desk; 
    desk.prototype = f;
}

function Box(name) { 
    this.name = name;
    this.arr = ['哥哥','妹妹','父母']; 
    }

Box.prototype.run = function () { 
    return this.name;
};

function Desk(name, age) { 
    Box.call(this, name); 
    this.age = age;
}

inPrototype(Box, Desk);                    //通过这里实现继承
var desk = new Desk('Lee',100); 
desk.arr.push('姐姐'); 
alert(desk.arr);
alert(desk.run());                        //只共享了方法
var desk2 = new Desk('Jack', 200); 
alert(desk2.arr);                        //引用问题解决
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 之 基本包装类型]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/28/javascript-zhi-ji-ben-bao-zhuang-lei-xing/"/>
    <updated>2015-10-28T23:43:32+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/28/javascript-zhi-ji-ben-bao-zhuang-lei-xing</id>
    <content type="html"><![CDATA[<p>为了便于操作基本类型值 ,ECMAScript 提供了 3 个特殊的引用类型 : <code>Boolean</code> 、<code>Number</code> 和 <code>String</code>。这些类型与其他引用类型相似 ,但同时也具有与各自的基本类型相应的特殊行为 。 实际上,每当读取一个基本类型值的时候,后台就会创建一个对应的基本包装类型的对象 , 从而能够调用一些方法来操作这些数据。</p>

<h3>一、基本包装类型概述</h3>

<pre><code>var box = 'Mr. Lee';                     //定义一个字符串
var box2 = box.substring(2);             //截掉字符串前两位
alert(box2);
</code></pre>

<p>变量 box 是一个字符串类型,而 <code>box.substring(2)</code>又说明它是一个对象(<code>PS:只有对象才 会调用方法</code>),最后把处理结果赋值给 box2。<code>'Mr. Lee'</code>是一个字符串类型的值,按道理它不 应该是对象,不应该会有自己的方法,比如:</p>

<pre><code>alert('Mr. Lee'.substring(2));            //直接通过值来调用方法
</code></pre>

<p>1.字面量写法:</p>

<pre><code>var box = 'Mr. Lee';             //字面量 
box.name = 'Lee';                //无效属性
box.age = function () {          //无效方法
    return 100; 
};
alert(box);                      //Mr. Lee 
alert(box.substring(2));         //. Lee 
alert(typeof box);               //string
alert(box.name);                 //undefined
alert(box.age());                //错误
</code></pre>

<!--more-->


<p>2.new 运算符写法:</p>

<pre><code>var box = new String('Mr. Lee');      //new 运算符
box.name = 'Lee';                     //有效属性
box.age = function () {               //有效方法
    return 100;
};
alert(box);                          //Mr. Lee
alert(box.substring(2));             //. Lee
alert(typeof box);                   //object
alert(box.name);                     //Lee
alert(box.age());                    //100
</code></pre>

<p>以上字面量声明和 new 运算符声明很好的展示了他们之间的区别。但有一定还是可以 肯定的,那就是不管字面量形式还是 new 运算符形式,都可以使用它的内置方法。并 且 <code>Boolean</code> 和 <code>Number</code> 特性与 <code>String</code> 相同,三种类型可以成为基本包装类型。</p>

<p>PS:在使用 new 运算符创建以上三种类型的对象时,可以给自己添加属性和方法,但 我们建议不要这样使用,因为这样会导致根本分不清到底是基本类型值还是引用类型值。</p>

<h2>二、Boolean 类型</h2>

<p>Boolean 类型没有特定的属性或者方法。</p>

<h2>三、Number 类型</h2>

<p>Number 类型有一些静态属性(直接通过 <code>Number</code> 调用的属性,而无须 <code>new</code> 运算符)和方法。</p>

<p>Number 静态属性</p>

<pre><code>属性                   描述    
MAX_V ALUE            表示最大数    
MIN_V ALUE            表示最小值    
NaN                   非数值
NEGA TIVE_INFINITY    负无穷大,溢出返回该值
POSITIVE_INFINITY     无穷大,溢出返回该值
prototype             原型,用于增加新属性和方法
</code></pre>

<p>Number 对象的方法</p>

<pre><code>方法                    描述
toString()             将数值转化为字符串,并且可以转换进制
toLocaleString()       根据本地数字格式转换为字符串
toFixed()              将数字保留小数点后指定位数并转化为字符串
toExponential()        将数字以指数形式表示 ,保留小数点后指定位数并转化为 字符串
toPrecision()          指数形式或点形式表述数 ,保留小数点后面指定位数并转 化为字符串
</code></pre>

<pre><code>
    var box = 1000.789;            
    alert(box.toString());             //转换为字符串,传参可以转换进制 
    alert(box.toLocaleString());       //本地形式, 1,000.789
    alert(box.toFixed(2));             //小数点保留, 1000.78 
    alert(box.toExponential());        //指数形式,传参会保留小数点
    alert(box.toPrecision(3));         //指数或点形式,传参保留小数点
</code></pre>

<h2>四、String 类型</h2>

<p><code>String</code> 类型包含了三个属性和大量的可用内置方法。</p>

<ul>
<li><p>String 对象属性</p>

<p>  属性                     描述
  length                  返回字符串的字符长度
  constructor             返回创建 String 对象的函数
  prototype               通过添加属性和方法扩展字符串定义</p></li>
</ul>


<p>String 也包含对象的通用方法,比如 <code>valueOf()</code>、<code>toLocaleString()</code>和 <code>toString()</code> 方法,但这 些方法都返回字符串的基本值。</p>

<ul>
<li><p>字符方法</p>

<p>  charAt(n)          返回指定索引位置的字符
  charCodeAt(n)      以 Unicode 编码形式返回指定索引位置的字符</p></li>
</ul>


<pre><code>    var box = 'Mr.Lee'; 
    alert(box.charAt(1));               //r
    alert(box.charCodeAt(1));           //114
    alert(box[1]);                      //r,通过数组方式截取
</code></pre>

<p>PS: <code>box[1]</code> 在 IE 浏览器会显示 <code>undefined</code>,所以使用时要慎重。</p>

<ul>
<li><p>字符串操作方法</p>

<p>  concat(str1&hellip;str2)          将字符串参数串联到调用该方法的字符串
  slice(n,m)                   返回字符串 n 到 m 之间位置的字符串
  substring(n,m)               同上
  substr(n,m)                  返回字符串 n 开始的 m 个字符串</p></li>
</ul>


<pre><code>    var box = 'Mr.Lee';
    alert(box.concat(' is ', ' Teacher ', '!'));           //Mr.Lee is Teacher 
    alert(box.slice(3));                                   //Lee
    alert(box.slice(3,5));                                 //Le

    alert(box.substring(3));                               //Lee
    alert(box.substring(3,5));                             //Le
    alert(box.substr(3));                                  //Lee
    alert(box.substr(3,5));                                //Lee

    var box = 'Mr.Lee'; 
    alert(box.slice(-3));                //Lee,6+(-3)=3 位开始                          
    alert(box.substring(-3));            //Mr.Lee 负数返回全部
    alert(box.substr(-3));               //Lee,6+(-3)=3 位开始

    var box = 'Mr.Lee'; 
    alert(box.slice(3, -1));             //Le 6+(-1)=5, (3,5)
    alert(box.substring(3, -1));         //Mr. 第二参为负,直接转 0, 并且方法会把较小的数字提前, (0,3)
    alert(box.substr(3, -1));            //'' 第二参数为负,直接转 0 ,(3,0)
</code></pre>

<p>PS:IE 的 JavaScript 实现在处理向 substr()方法传递负值的情况下存在问题,它会返回 原始字符串,使用时要切记。</p>

<ul>
<li><p>字符串位置方法</p>

<p>  indexOf(str, n)        从 n 开始搜索的第一个 str,并将搜索的索引值返回
  lastIndexOf(str, n)    从 n 开始搜索的最后一个 str,并将搜索的索引值返回</p></li>
</ul>


<pre><code class="">var box = 'Mr.Lee is Lee'; 
alert(box.indexOf('L'));                  //3
alert(box.indexOf('L', 5));               //10           
alert(box.lastIndexOf('L'));              //10
alert(box.lastIndexOf('L', 5));           //3,从指定的位置向前搜索
</code></pre>

<p>PS:如果没有找到想要的字符串,则返回 -1。</p>

<p>示例:找出全部的 L</p>

<pre><code>var box = 'Mr.Lee is Lee';            //包含两个 L 的字符串
var boxarr = [];                      //存放 L 位置的数组 
var pos = box.indexOf('L');           //先获取第一个 L 的位置
while (pos &gt; -1) {                    //如果位置大于-1,说明还存在 L 
    boxarr.push(pos);                 //添加到数组
    pos = box.indexOf('L', pos + 1);  //从新赋值 pos 目前的位置
}
alert(boxarr);
</code></pre>

<ul>
<li><p>大小写转换方法</p>

<p>  var box = &lsquo;Mr.Lee is Lee&rsquo;;
  alert(box.toLowerCase());          //全部小写
  alert(box.toUpperCase());          //全部大写
  alert(box.toLocaleLowerCase());    //将字符串全部转换为小写,并且本地化
  alert(box.toLocaleUpperCase());    //将字符串全部转换为大写,并且本地化</p></li>
<li><p>字符串的模式匹配方法</p>

<p>  match(pattern)                    返回 pattern 中的子串或 null
  replace(pattern, replacement)     用 replacement 替换 pattern
  search(pattern)                   返回字符串中 pattern 开始位置
  split(pattern)                    返回字符串按指定 pattern 拆分的数组</p></li>
</ul>


<pre><code>    var box = 'Mr.Lee is Lee'; 
    alert(box.match('L'));             //找到 L,返回 L 否则返回 null 
    alert(box.search('L'));            //找到 L 的位置,和 indexOf 类型
    alert(box.replace('L', 'Q'));      //把 L 替换成 Q 
    alert(box.split(' '));             //以空格分割成字符串     
</code></pre>

<ul>
<li>其他方法</li>
</ul>

]]></content>
  </entry>
  
</feed>
