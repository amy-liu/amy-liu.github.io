<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jquery | 云端笔记]]></title>
  <link href="http://amy-liu.github.io/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://amy-liu.github.io/"/>
  <updated>2015-10-11T23:25:23+08:00</updated>
  <id>http://amy-liu.github.io/</id>
  <author>
    <name><![CDATA[amy-liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQuery 之 基础DOM操作]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/10/jquery-zhi-ji-chu-domhe-csscao-zuo/"/>
    <updated>2015-10-10T21:00:03+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/10/jquery-zhi-ji-chu-domhe-csscao-zuo</id>
    <content type="html"><![CDATA[<h2>一、设置元素及内容</h2>

<p>在常规的 DOM 元素中,使用 html()和 text()方法获取内部的数据。</p>

<pre><code>$('#box').html();                       //获取 html 内容 
$('#box').text();                       //获取文本内容,会自动清理 html 标签
$('#box').html('&lt;em&gt;www.li.cc&lt;/em&gt;');   //设置 html 内容 
$('#box').text('&lt;em&gt;www.li.cc&lt;/em&gt;');   //设置文本内容,会自动转义 html 标签
</code></pre>

<p>使用 html()或 text()设置元素里的内容时,会清空原来的数据。而我们期 望能够追加数据的话,需要先获取原本的数据。</p>

<pre><code>$('#box').html($('#box').html() + '&lt;em&gt;www.li.cc&lt;/em&gt;'); //追加数据
</code></pre>

<p>如果元素是表单的话,jQuery 提供了 <code>val()</code>方法进行获取或设置内部的文本数据。</p>

<pre><code>$('input').val(); //获取表单内容 
$('input').val('www.li.cc'); //设置表单内容
</code></pre>

<p>如果想设置多个选项的选定状态,比如下拉列表、单选复选框等等,可以通过数组传递 操作。</p>

<pre><code>$("input").val(["check1","check2", "radio1" ]); //value 值是这些的将被选定
</code></pre>

<!--more-->


<h2>二、元素属性操作</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery 之 过滤选择器]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/09/jquery-guo-lu-xuan-ze-qi/"/>
    <updated>2015-10-09T21:54:41+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/09/jquery-guo-lu-xuan-ze-qi</id>
    <content type="html"><![CDATA[<p>过滤选择器简称:过滤器。它其实也是一种选择器,而这种选择器类似与 CSS3里的伪类,可以让不支持 CSS3 的低版本浏览器也能支持。</p>

<h2>一、基本过滤器</h2>

<p>通过特定的过滤规则来筛选所需的 DOM 元素,和CSS中的伪类的语法类似:使用冒号(:)开头。</p>

<pre><code>$('li:first').css('background', '#ccc');       //第一个元素
$('li:last).css('background', '#ccc');         //最后一个元素
$('li:not(.red)).css('background', '#ccc');    //非 class 为 red 的元素 

$('li:even').css('background', '#ccc');        //索引为偶数的元素
$('li:odd).css('background', '#ccc');          //索引为奇数的元素
$('li:eq(2)).css('background', '#ccc');        //指定索引值的元素 

$('li:gt(2)').css('background', '#ccc');       //大于索引值的元素
$('li:lt(2)').css('background', '#ccc');       //小于索引值的元素

$(':header').css('background', '#ccc');        //页面所有 h1 ~ h6 元素
</code></pre>

<!--more-->


<p>注意:<code>:focus</code>过滤器,必须是网页初始状态的已经被激活焦点的元素才能实现元素获取。 而不是鼠标点击或者 Tab 键盘敲击激活的。</p>

<pre><code>$('input').get(0).focus();                 //先初始化激活一个元素焦点 
$(':focus').css('background', 'red');      //被焦点的元素
</code></pre>

<p>jQuery 为最常用的过滤器提供了专用的方法,已达到提到性能和效率的作用:</p>

<pre><code>$('li').eq(2).css('background', '#ccc');         //元素 li 的第三个元素,负数从后开始
$('li').first().css('background', '#ccc');       //元素 li 的第一个元素
$('li').last().css('background', '#ccc');        //元素 li 的最后一个元素
$('li').not('.red').css('background', '#ccc');   //元素 li 不含 class 为 red 的元素
</code></pre>

<h2>二、内容过滤器</h2>

<p>内容过滤器的过滤规则主要是包含的子元素或文本内容上。</p>

<pre><code>$('div:contains("ycku.com")').css('background', '#ccc');   //选择元素文本节点含有 ycku.com 文本的元素
$('div:empty').css('background', '#ccc');                  //选择空元素
$('ul:has(.red)').css('background', '#ccc');               //选择子元素含有 class 是 red 的元素 
$(':parent').css('background', '#ccc');                    //选择非空元素  选取含有子元素或文本的元素
</code></pre>

<p>jQuery 提供了一个 has()方法来提高:has 过滤器的性能:</p>

<pre><code>$('ul').has('.red').css('background', '#ccc');         //选择子元素含有 class 是 red 的元素
</code></pre>

<p>jQuery 提供了一个名称和<code>:parent</code>相似的方法,但这个方法并不是选取含有子元素或文本 的元素,而是获取当前元素的父元素,返回的是元素集合。</p>

<pre><code>$('li').parent().css('background', '#ccc');               //选择当前元素的父元素 
$('li').parents().css('background', '#ccc');              //选择当前元素的父元素及祖先元素 
$('li').parentsUntil('div').css('background', '#ccc');    //选择当前元素遇到 div 父元素停止
</code></pre>

<h2>三、可见性过滤器</h2>

<pre><code>$('p:hidden).size(); //选取所有不可见元素
$('p:visible').size(); //元素 p 显示的元素
</code></pre>

<p>注意:<code>:hidden</code>过滤器一般是包含的内容为:CSS 样式为<code>display:none、</code>input 表单类型为 <code>type="hidden"</code>和 <code>visibility:hidden</code>的元素。</p>

<h2>四、子元素过滤器</h2>

<p>子元素过滤器的过滤规则是通过父元素和子元素的关系来获取相应的元素。</p>

<pre><code>$('li:first-child').css('background', '#ccc');       //每个父元素第一个 li 元素 
$('li:last-child').css('background', '#ccc');        //每个父元素最后一个 li 元素 
$('li:only-child').css('background', '#ccc');        //每个父元素只有一个 li 元素 
$('li:nth-child(odd)').css('background', '#ccc');    //每个父元素奇数 li 元素
$('li:nth-child(even)').css('background', '#ccc');   //每个父元素偶数 li 元素
$('li:nth-child(2)').css('background', '#ccc');      //每个父元素第三个 li 元素
</code></pre>

<h2>五、其他方法</h2>

<p>jQuery 在选择器和过滤器上,还提供了一些常用的方法,方便我们开发时灵活使用。</p>

<pre><code>$('.red').is('li');                             //true,选择器,检测 class 为是否为 red
$('.red').is($('li'));                          //true,jQuery 对象集合,同上
$('.red').is($('li').eq(2));                    //true,jQuery 对象集合,同上
$('.red').is($('li').get(2));                   //true,DOM 对象,同上
$('.red').is(function () {                      //true,方法,同上
    return $(this).attr('title') == '列表 3';    //可以自定义各种判断
}));   
$('li').eq(2).hasClass('red');                   //和 is 一样,只不过只能传递 class

$('li').slice(0,2).css('background', '#ccc');    //前三个变成色
</code></pre>

<p>注意:这个参数有多种传法和 JavaScript 的 slice 方法是一样的比如:slice(2);slice(2,4),第三和第四被选定;slice(0,-2),从倒数第三个位置,向前选定 所有;slice(2,-2),前两个和末尾两个未选定。</p>

<pre><code>$("div").find("p").end().get(0);        //返回 div 的原生 DOM
$('div').contents().size();             //返回子节点(包括文本)数量

$('li').filter('.red').css('background','#ccc');         //选择 li 的 class 为 red 的元素
$('li').filter('.red, :first, :last').css('background','#ccc');    //增加了首尾选择
</code></pre>

<p>特殊要求函数返回</p>

<pre><code>$('li').filter(function () {
        return $(this).attr('class') == 'red' &amp;&amp; $(this).attr('title') == '列表 3'; 
        }).css('background', '#ccc');
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery 之 常规选择器]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/09/jquery-chang-gui-qi/"/>
    <updated>2015-10-09T20:49:48+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/09/jquery-chang-gui-qi</id>
    <content type="html"><![CDATA[<p>jQuery 最核心的组成部分就是：选择器引擎。它继承了 CSS 的语法,不必担心浏览器的兼容性。</p>

<h3>一、简单选择器</h3>

<pre><code>$('div').css('color', 'red');          //元素名选择器,返回多个元素 
$('#box').css('color', 'red');         //ID 选择器,返回单个元素
$('.box').css('color', 'red');         //类(class)选择器,返回多个元素
</code></pre>

<p>可以用 jQuery 核心自带的一个属性 length 或 size()方法来查看返回的元素个数。</p>

<h5>容错功能：</h5>

<pre><code>$('#pox').css('color', 'red');       //不存在 ID 为 pox 的元素,也不报错 
document.getElementById('pox').style.color = 'red';     //报错了
</code></pre>

<!--more-->


<p>原生方法可以这么判断解决这个问题:</p>

<pre><code>if (document.getElementById('pox')) { //先判断是否存在这个对象 
    document.getElementById('pox').style.color = 'red';
}
</code></pre>

<p>使用 jQuery 调用的话,怎么去判断是否存在呢?因 为本身返回的是 jQuery 对象,可能会导致不存在元素存在与否,都会返回 true。</p>

<pre><code>if ($('#pox').length &gt; 0) { //判断元素包含数量即可 
    $('#pox').css('color', 'red');
}
</code></pre>

<p>可以用转换为 DOM 对象的方式来判断,例如:</p>

<pre><code>if ($('#pox').get(0)) {} 或 if ($('#pox')[0]) {} //通过数组下标也可以获取 DOM 对象
</code></pre>

<h3>二、进阶选择器</h3>

<pre><code>$('span, em, .box').css('color', 'red');    //群组选择器 
$('ul li a').css('color', 'red');           //后代选择器
$('*').css('color', 'red');                 //通配选择器
</code></pre>

<h3>三、高级选择器</h3>

<h4>1、层次选择器</h4>

<pre><code>$('#box p').css('color', 'red');              //后代选择器
$('#box').find('p').css('color', 'red');      //和后代选择器等价

$('#box &gt; p').css('color', 'red');            //子选择器,孙子后失明
$('#box').children('p').css('color', 'red');  //和子选择器等价

$('#box+p').css('color', 'red');              //next 选择器(下一个同级节点)
$('#box').next('p').css('color', 'red');      //和 next 选择器等价

$('#box ~ p').css('color', 'red');            //nextAll 选择器(后面所有同级节点)
$('#box').nextAll('p').css('color', 'red');   //和 nextAll 选择器等价
</code></pre>

<p>在 <code>find()、next()、nextAll()和 children()</code>这四个方法中,如果不传递参数,就相当于传递 了“*”,我们不建议这么做,不但影响性能,而且由于精准度不佳可能产生怪异的结果。</p>

<p>补充：</p>

<pre><code>$('#box').prev('p').css('color', 'red'); //同级上一个元素 
$('#box').prevAll('p').css('color', 'red'); //同级所有上面的元素

$('#box').prevUntil('p').css('color', 'red'); //同级上非指定元素选定,遇到则停止 
$('#box').nextUntil('p').css('color', 'red'); //同级下非指定元素选定,遇到则停止
</code></pre>

<p>siblings()方法正好集成了 prevAll()和 nextAll()两个功能的效果,及上下相邻的所有元素 进行选定:</p>

<pre><code>$('#box').siblings('p').css('color', 'red'); //同级上下所有元素选定
</code></pre>

<p>选择器快慢分析:</p>

<p>最快的是 find()方法,最慢的是$(&lsquo;#box p&rsquo;)这种高级选择器。如果一开始将 $(&lsquo;#box&rsquo;)进行赋值,那么 jQuery 就对其变量进行缓存,那么速度会进一步提高。</p>

<pre><code>var box = $('#box'); 
var p = box.find('p');
</code></pre>

<h4>2、属性选择器</h4>

<pre><code>$('a[title]').css('color', 'red');           //选定这个属性的
$('a[title=num1]').css('color', 'red');      //选定具有这个属性=这个属性值的
$('a[title=^num]').css('color', 'red');      //选定具有这个属性且开头属性值匹配的
$('a[title|="num"]').css('color', 'red');    //选定具有这个属性且等于属性值或开头属性值匹配后面跟一个“-”号
$('a[title$=num]').css('color','red');       //选定具有这个属性且结尾属性值匹配的
$('a[title!=num1]').css('color','red');      //选定具有这个属性且属性值不想等的
$('a[title~=num1]').css('color','red');      //选定具有这个属性且属性值是以一个空格分割的列表,其中包含属性值的
$('a[title*=num]').css('color','red');       //选定具有这个属性且属性值含有一个指定字串的
$('a[bbb][title=num1]').css('color','red');  //选定具有多个属性且属性值匹配成功的
</code></pre>
]]></content>
  </entry>
  
</feed>
