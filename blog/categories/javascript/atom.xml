<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | 云端笔记]]></title>
  <link href="http://amy-liu.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://amy-liu.github.io/"/>
  <updated>2015-10-18T21:27:11+08:00</updated>
  <id>http://amy-liu.github.io/</id>
  <author>
    <name><![CDATA[amy-liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript 之 函数]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/18/javascrhan-shu/"/>
    <updated>2015-10-18T21:15:57+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/18/javascrhan-shu</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 之 流程控制语句]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/18/javascript-zhi-liu-cheng-kong-zhi-yu-ju/"/>
    <updated>2015-10-18T20:41:18+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/18/javascript-zhi-liu-cheng-kong-zhi-yu-ju</id>
    <content type="html"><![CDATA[<h3>一、语句的定义</h3>

<p>语句的种类
```
    声明语句   变量声明语句   var box = 100;
              标签声明语句   label : box;</p>

<pre><code>达式语句   变量赋值语句    box = 100;
          函数调用语句    box();
          属性赋值语句    box.property = 100;
          方法调用语句    box.method();

分支语句   条件分支语句    if () {} else {}
          多重分支语句    switch () { case n : ...};
</code></pre>

<p>```
语句的种类 (续)</p>

<!--more-->


<pre><code>    循环语句       for            for (;;;) {}
                  for ... in     for ( x in x) {}
                  while          while () {};
                  do ... while   do {} while ();

    控制结构       继续执行子句     continue ;
                  终断执行子句     break ;
                  函数返回子句     return ;
                  异常触发子句     throw ;
                  异常捕获与处理    try {} catch () {} finally {}

    其他           空语句          ;
                   with 语句      with () {}
</code></pre>

<h3>二、if 语句</h3>

<p>略</p>

<h2>三、switch 语句</h2>

<p>switch 语句是多重条件判断,用于多个值相等的比较。
<code>
    var box = 1;
    switch (box) {                        //用于判断 box 相等的多个值
        case 1 :
            alert('one');
            break;                        //break;用于防止语句的穿透
        case 2 :
            alert('two');
            break;
        case 3 :
            alert('three');
            break;
            default :                    //相当于 if 语句里的 else,否则的意思
            alert('error');
    }
</code></p>

<h2>四、do&hellip;while 语句</h2>

<p>do&hellip;while 语句是一种先运行,后判断的循环语句。也就是说,不管条件是否满足,至少先运行一次循环体。</p>

<pre><code>var box = 1;       //如果是 1,执行五次,如果是 10,执行 1 次     
do {
    alert(box);
    box++;
} while (box &lt;= 5);   //先运行一次,再判断
</code></pre>

<h2>五、while 语句</h2>

<p>while 语句是一种先判断,后运行的循环语句。也就是说,必须满足条件了之后,方可运行循环体。</p>

<pre><code>var box = 1;        //如果是 1,执行五次,如果是 10,不执行 
while (box &lt;= 5) {  //先判断,再执行
    alert(box);
    box++; 
}
</code></pre>

<h2>六、for 语句</h2>

<p>for 语句也是一种先判断,后运行的循环语句。但它具有在执行循环之前初始变量和定义循环后要执行代码的能力。</p>

<pre><code>for (var box = 1; box &lt;= 5 ; box++) {     //第一步,声明变量 var box = 1;
    alert(box);                           //第二步,判断 box &lt;=5
}                                         //第三步,alert(box)
                                          //第四步,box++ //第五步,从第二步再来,直到判断为 false
</code></pre>

<h2>七、 for&hellip;in 语句</h2>

<p>for&hellip;in 语句是一种精准的迭代语句,可以用来枚举对象的属性。</p>

<pre><code>var box = {                         //创建一个对象 
    'name' : '李炎恢',               //键值对,左边是属性名,右边是值
    'age' : 28,
    'height' : 178 };
for (var p in box) {                //列举出对象的所有属性
    alert(p);
</code></pre>

<h2>八、break 和 continue 语句</h2>

<p>break 和 continue 语句用于在循环中精确地控制代码的执行 。其中,break 语句会立即退出循环,强制继续执行循环体后面的语句 。而 continue 语句退出当前循环,继续后面的循环。</p>

<pre><code>for (var box = 1; box &lt;= 10; box++) {
    if (box == 5) break;                //如果 box 是 5,就退出循环
    document.write(box); 
    document.write('&lt;br /&gt;');
}
</code></pre>

<p>continue</p>

<pre><code>for (var box = 1; box &lt;= 10; box++) { 
    if (box == 5) continue;      //如果 box 是 5,就退出当前循环
    document.write(box); 
    document.write('&lt;br /&gt;');
}
</code></pre>

<h2>九、with 语句</h2>

<p>with 语句的作用是将代码的作用域设置到一个特定的对象中。</p>

<pre><code>var box = {                  //创建一个对象 
    'name' : '李炎恢',        //键值对
    'age' : 28,
    'height' : 178 
};
var n = box.name;            //从对象里取值赋给变量
var a = box.age; 
var h = box.height;
</code></pre>

<p>可以将上面的三段赋值操作改写成:</p>

<pre><code>with (box) {                 //省略了 box 对象名   
    var n = name;           
    var a = age;            
    var h = height;         
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 之 运算符]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/17/javascript-zhi-yun-suan-fu/"/>
    <updated>2015-10-17T23:31:08+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/17/javascript-zhi-yun-suan-fu</id>
    <content type="html"><![CDATA[<h3>一、什么是表达式</h3>

<p>表达式是 ECMAScript 中的一个“短语”,解释器会通过计算把它转换成一个值。最简 单的表达式是字面量或者变量名。例如:
<code>
    5.96                           //数值字面量
    'Lee'                          //字符串字面量
    true                           //布尔值字面量
    null                           //空值字面量
    /Java/                         //正则表达式字面量
    {x:1, y:2}                     //对象字面量、对象表达式
    [1,2,3]                        //数组字面量、数组表达式
    function(n) {return x+y;}      //函数字面量、函数表达式
    box                            //变量
</code>    <br/>
当然,还可以通过合并简单的表达式来创建复杂的表达式。比如:</p>

<pre><code>box + 5.96      //加法运算的表达式
typeof(box)     //查看数据类型的表达式
box &gt; 8         //逻辑运算表达式
</code></pre>

<p>通过上面的叙述,我们得知,单一的字面量和组合字面量的运算符都可称为表达式。</p>

<h2>二、一元运算符</h2>

<p>只能操作一个值的运算符叫做一元运算符。</p>

<p>1.递增++和递减- -</p>

<pre><code>var box = 100;
++box; //把 box 累加一个 1,相当于 box = box+1 
--box; //把 box 累减一个 1,相当于 box = box-1
box++; //同上
box--; //同上
</code></pre>

<!--more-->


<p>2.前置和后置的区别</p>

<p>在没有赋值操作 ,前置和后置是一样的 。但在赋值操作时 ,如果递增或递减运算符前置 , 那么前置的运算符会先累加或累减再赋值,如果是后置运算符则先赋值再累加或累减。</p>

<pre><code>var box = 100;
var age = ++box;     //age 值为 101 
var height = box++;  //height 值为 100
</code></pre>

<p>3.其他类型应用一元运算符的规则</p>

<pre><code>var box = '89'; box++;                 //90,数值字符串自动转换成数值              
var box = 'ab'; box++;                 //NaN,字符串包含非数值转成 NaN
var box = false; box++;                //1,false 转成数值是 0,累加就是 1
var box = 2.3; box++;                  //3.3,直接加 1
var box = {                            //1,不设置 toString 或 valueOf 即为 NaN
    toString : function() { 
    return 1;
}
box++;
}
</code></pre>

<p>4.加和减运算符</p>

<p>加运算规则如下:(其实就是取正)</p>

<pre><code>var box = 100; +box;              //100,对于数值,不会产生任何影响 
var box = '89'; +box;             //89,数值字符串转换成数值
var box = 'ab'; +box;             //NaN,字符串包含非数值转成 NaN 
var box = false; +box;            //0,布尔值转换成相应数值 
var box = 2.3; +box;              //2.3,没有变化
var box = {                       //1,不设置 toString 或 valueOf 即为 NaN
    toString : function() { 
    return 1;
};
};
+box;
</code></pre>

<p>减运算规则如下:(其实就是取负)</p>

<pre><code>var box = 100; －box;              //－100,对于数值,不会产生任何影响 
var box = '89'; －box;             //－89,数值字符串转换成数值
var box = 'ab'; －box;             //NaN,字符串包含非数值转成 NaN 
var box = false; －box;            //0,布尔值转换成相应数值 
var box = 2.3; －box;              //－2.3,没有变化
var box = {                       //－1,不设置 toString 或 valueOf 即为 NaN
    toString : function() { 
    return 1;
};
};
－box;
</code></pre>

<p>加法和减法运算符一般用于算术运算,也可向上面进行类型转换。</p>

<h2>三、算术运算符</h2>

<p>ECMAScript 定义了 5 个算术运算符,加减乘除求模 (取余)。如果在算术运算的值不是 数值,那么后台会先使用 Number()转型函数将其转换为数值(隐式转换)。</p>

<pre><code>var box = 1 + 2;                              //等于 3
var box = 1 + NaN;                            //NaN,只要有一个 NaN 就为 NaN
var box = Infinity + -Infinity;               //NaN,正无穷和负无穷相加等 NaN
var box = 100 + '100';                        //100100,字符串连接符,有字符串就不是加法
var box = '您的年龄是:' + 10 + 20;             //您的年龄是:1020,被转换成字符串
var box = 10 + 20 + '是您的年龄';              //30 是您的年龄,没有被转成字符串
var box = '您的年龄是:' + (10 + 20);           //您的年龄是:30,没有被转成字符串
varbox=10+ 对象                //10[object Object],如果有 toString()或 valueOf() 则返回 10+返回数的值

var box = 100 - true;             //99,true 转成数值为 1 
var box = 100 - '';               //100,''转成了 0
var box = 100 - null;             //100,null 转成了 0
var box = 100 - 'Lee';            //NaN,Lee 转成了 NaN
varbox=100- 对象                   //NaN,如果有 toString()或 valueOf()则返回 10-返回数的值

...
</code></pre>

<h2>四、关系运算符</h2>

<p>用于进行比较的运算符称作为关系运算符:小于 (&lt;)、大于(>)、小于等于(&lt;=)、大于等于(>=)、相等(==)、不等(!=)、全等(恒等)(===)、不全等(不恒等)(!==)</p>

<p>和其他运算符一样,当关系运算符操作非数值时要遵循一下规则:</p>

<p>1.两个操作数都是数值,则数值比较;<br/>
2.两个操作数都是字符串,则比较两个字符串对应的字符编码值; <br/>
3.两个操作数有一个是数值,则将另一个转换为数值,再进行数值比较; <br/>
4.两个操作数有一个是对象,则先调用 valueOf()方法或 toString()方法,再用结果比较;</p>

<pre><code>var box = 3 &gt; 2;          //true
var box = 3 &gt; 22;         //false
var box = '3' &gt; 22;       //false
var box = '3' &gt; '22';     //true
var box = 'a' &gt; 'b';      //false
var box = 'a' &gt; 'B';      //true B=66
var box = 1 &gt; 对象;        //false,如果有 toString()或 valueOf()则返回 1 &gt; 返回数的值
</code></pre>

<p>在相等和不等的比较上,如果操作数是非数值,则遵循一下规则:</p>

<p>1.一个操作数是布尔值,则比较之前将其转换为数值, <code>false</code> 转成 <code>0</code> , <code>true</code> 转成 <code>1</code> ; <br/>
2.一个操作数是字符串,则比较之前将其转成为数值再比较; <br/>
3.一个操作数是对象,则先调用 <code>valueOf()</code> 或 <code>toString()</code> 方法后再和返回值比较; <br/>
4.不需要任何转换的情况下, <code>null</code> 和 <code>undefined</code> 是相等的;<br/>
5.一个操作数是 NaN,则==返回 false,!=返回 true;并且 NaN 和自身不等;<br/>
6.两个操作数都是对象 ,则比较他们是否是同一个对象 ,如果都指向同一个对象 ,则返 回 <code>true</code> ,否则返回 <code>false</code> 。<br/>
7.在全等和全不等的判断上,比如值和类型都相等,才返回 <code>true</code> ,否则返回 <code>false</code>。</p>

<h2>五、逻辑运算符</h2>

<p>逻辑运算符通常用于布尔值的操作,一般和关系运算符配合使用,有三个逻辑运算符 :
逻辑与 &amp;&amp; (AND)、逻辑或 || (OR)、逻辑非 ! (NOT)。</p>

<p>1.逻辑与(AND) :&amp;&amp;</p>

<pre><code>var box = (5 &gt; 4) &amp;&amp; (4 &gt; 3) //true,两边都为 true,返回 
</code></pre>

<p>如果两边的操作数有一个操作数不是布尔值的情况下,与运算就不一定返回布尔值 ,此 时,遵循已下规则:</p>

<p>1.第一个操作数是对象,则返回第二个操作数; <br/>
2.第二个操作数是对象,则第一个操作数返回 true,才返回第二个操作数,否则返回 false; <br/>
3.有一个操作数是 null,则返回 null;<br/>
4.有一个操作数是 undefined,则返回 undefined。</p>

<pre><code>var box = 对象 &amp;&amp; (5 &gt; 4);      //true,返回第二个操作数
var box = (5 &gt; 4) &amp;&amp; 对象;      //[object Object]
var box = (3 &gt; 4) &amp;&amp; 对象;      //false
var box = (5 &gt; 4) &amp;&amp; null;     //null
</code></pre>

<p>逻辑与运算符属于短路操作,顾名思义,如果第一个操作数返回是 false,第二个数不 管是 true 还是 false 都返回的 false。</p>

<pre><code>var box = true &amp;&amp; age;            //出错,age 未定义 
var box = false &amp;&amp; age;           //false,不执行 age 了
</code></pre>

<p>2.逻辑或(OR):||</p>

<p>如果两边的操作数有一个操作数不是布尔值的情况下,逻辑与运算就不一定返回布尔 值,此时,遵循已下规则:</p>

<p>1.第一个操作数是对象,则返回第一个操作数;<br/>
2.第一个操作数的求值结果为 false,则返回第二个操作数;<br/>
3.两个操作数都是对象,则返回第一个操作数; <br/>
4.两个操作数都是 null,则返回 null;<br/>
5.两个操作数都是 NaN,则返回 NaN; <br/>
6.两个操作数都是 undefined,则返回 undefined;</p>

<pre><code>var box = 对象 || (5 &gt; 3);          //[object Object]
varbox=(5&gt;3)|| 对象;                //true
var box = 对象 1 || 对象 2;          //[object Object]1
var box = null || null;             //null
var box = NaN || NaN;               //NaN
var box = undefined || undefined;   //undefined
</code></pre>

<p>3.逻辑非(NOT):!</p>

<p>逻辑非运算符可以用于任何值 。无论这个值是什么数据类型 ,这个运算符都会返回一个 布尔值。它的流程是:先将这个值转换成布尔值,然后取反,规则如下:</p>

<p>1.操作数是一个对象,返回 false;  <br/>
2.操作数是一个空字符串,返回 true; <br/>
3.操作数是一个非空字符串,返回 false; <br/>
4.操作数是数值 0,返回 true; <br/>
5.操作数是任意非 0 数值(包括 Infinity),false; <br/>
6.操作数是 null,返回 true;
7.操作数是 NaN,返回 true; <br/>
8.操作数是 <code>undefined</code>,返回 <code>true</code>;
<code>
    var box = !(5 &gt; 4);       //false
    var box = !{};            //false
    var box = !'';            //true
    var box = !'Lee';         //false
    var box = !0;             //true
    var box = !8;             //false
    var box = !null;          //true      
    var box = !NaN;           //true
    var box = !undefined;     //true
</code></p>

<p>三元条件运算符</p>

<p>三元条件运算符其实就是后面将要学到的 if 语句的简写形式。</p>

<pre><code>var box = 5 &gt; 4 ? '对' : '错';       //对,5&gt;4 返回 true 则把'对'赋值给 box,反之。
</code></pre>

<p>相当于:</p>

<pre><code>var box = ''; 
if (5 &gt; 4) {
    box = '对'; 
} else {
    box = '错';
} 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 之 数据类型]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/17/javascript-zhi-shu-ju-lei-xing/"/>
    <updated>2015-10-17T23:23:46+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/17/javascript-zhi-shu-ju-lei-xing</id>
    <content type="html"><![CDATA[<p>ECMAScript 中有 5 种简单数据类型:<code>Undefined、Null、Boolean、Number 和 String。</code> 还有一种复杂数据类型——<code>Object</code>。ECMAScript 不支持任何创建自定义类型的机制,所有 值都成为以上 6 中数据类型之一。</p>

<h3>一、typeof 操作符</h3>

<p><code>typeof</code> 操作符是用来检测变量的数据类型 。对于值或变量使用 <code>typeof</code> 操作符会返回如下字符串。
<code>
    undefined  未定义
    boolean    布尔值
    string     字符串
    number     数值
    object     对象或 null
    function   函数
</code></p>

<p>typeof 操作符可以操作变量,也可以操作字面量。虽然也可以这样使用: typeof(box), 但,typeof 是操作符而非内置函数。PS:函数在 ECMAScript 中是对象,不是一种数据类型。 所以,使用 typeof 来区分 function 和 object 是非常有必要的。</p>

<pre><code>alert(typeof box);
</code></pre>

<!--more-->


<h2>二、Undefined 类型</h2>

<p><code>Undefined</code> 类型只有一个值,即特殊的 undefined。在使用 var 声明变量,但没有对其初 始化时,这个变量的值就是 <code>undefined</code> 。</p>

<pre><code>var box; 
alert(box);
</code></pre>

<p>PS:我们没有必要显式的给一个变量赋值为 <code>undefined</code> ,因为没有赋值的变量会隐式的 (自动的)赋值为 <code>undefined</code> ;而 <code>undefined</code> 主要的目的是为了用于比较 ,ECMAScript 第 3 版之 前并没有引入这个值,引入之后为了正式区分空对象与未经初始化的变量。</p>

<p>未初始化的变量与根本不存在的变量 (未声明的变量)也是不一样的。</p>

<pre><code>var box;
alert(age); //age is not defined
</code></pre>

<p>PS : 如果 <code>typeof box,typeof age</code> 都返回的 undefined。从逻辑上思考,他们的值,一个 是 undefined,一个报错;他们的类型,却都是 undefined。所以,我们在定义变量的时候, 尽可能的不要只声明,不赋值。</p>

<h2>三、Null 类型</h2>

<p>Null 类型是一个只有一个值的数据类型,即特殊的值 null。它表示一个空对象引用(指 针),而 typeof 操作符检测 null 会返回 object。</p>

<pre><code>var box = null; 
alert(typeof box);
</code></pre>

<p>如果定义的变量准备在将来用于保存对象,那么最好将该变量初始化为 null。这样,当 检查 null 值就知道是否已经变量是否已经分配了对象引用了。</p>

<pre><code>var box = null; 
if (box != null) {
    alert('box 对象已存在!'); 
}
</code></pre>

<p>有个要说明的是:undefined 是派生自 null 的,因此 ECMA-262 规定对它们的相等性测 试返回 true。</p>

<p>alert(undefined == null);</p>

<p>由于 <code>undefined</code> 和 <code>null</code> 两个值的比较是相等的,所以,未初始化的变量和赋值为 null 的 变量会相等。这时,可以采用 typeof 变量的类型进行比较。但,建议还是养成编码的规范, 不要忘记初始化变量。
<code>
var box;
var car = null;
alert(typeof box == typeof car)
</code></p>

<h2>四、Boolean</h2>

<p>Boolean 类型有两个值(字面量):<code>true</code> 和 <code>false</code>。而 <code>true</code> 不一定等于 1,<code>false</code> 不一定等于 0。 JavaScript 是区分大小写的,True 和 False 或者其他都不是 Boolean 类型的值。</p>

<pre><code>var box = true; 
alert(typeof box);
</code></pre>

<p>虽然 Boolean 类型的字面量只有 true 和 false 两种,但 ECMAScript 中所有类型的值都有 与这两个 Boolean 值等价的值。要将一个值转换为其对应的 Boolean 值,可以使用转型函数 <code>Boolean()</code>。</p>

<pre><code>var hello = 'Hello World!'; 
var hello2 = Boolean(hello); 
alert(typeof hello);
</code></pre>

<p>上面是一种显示转换 ,属于强制性转换 。而实际应用中 ,还有一种隐式转换 。比如,在 if 条件语句里面的条件判断,就存在隐式转换。</p>

<pre><code>var hello = 'Hello World!';
if (hello) {
    alert('如果条件为 true,就执行我这条!'); 
    } else {
    alert('如果条件为 false,就执行我这条!'); 
    }
</code></pre>

<p>以下是其他类型转换成 Boolean 类型规则</p>

<pre><code>数据类型      转换为 true 的值             转换为 false 的值
Boolean     true                         false
String      任何非空字符串                 空字符串
Number      任何非零数字值 (包括无穷大 )     0 和 NaN
Object      任何对象                       null
Undefined                                 undefined
</code></pre>

<h2>五、Number 类型</h2>

<p>Number 类型包含两种数值:整型和浮点型。为了支持各种数值类型, ECMA-262 定义了不同的数值字面量格式。
最基本的数值字面量是十进制整数。</p>

<pre><code>var box = 100; //十进制整数
</code></pre>

<h2>六、String 类型</h2>

<p>String 类型用于表示由于零或多个 16 位 Unicode 字符组成的字符序列,即字符串。字 符串可以由双引号(&ldquo;)或单引号(&lsquo;)表示。</p>

<pre><code>var box = 'Lee'; 
var box = "Lee";
</code></pre>

<p>PS:在某些其他语言(PHP)中,单引号和双引号表示的字符串解析方式不同, 而 ECMAScript 中,这两种表示方法没有任何区别。但要记住的是,必须成对出现,不能穿插 使用,否则会出错。</p>

<p>String 类型包含了一些特殊的字符字面量,也叫转义序列。</p>

<pre><code>\n  换行
\t  制表
\b  空格
\r  回车
\f  进纸
\\  斜杠
\'  单引号
\"  双引号
\xnn    以十六进制代码 nn 表示的一个字符(0~F)。例:\x41
\unnn   以十六进制代码 nnn 表示的一个 Unicode 字符(0~F)。例:\u03a3
</code></pre>

<p>字符串一旦创建,它们的值就不能改 变。要改变某个变量保存的字符串 ,首先要销毁原来的字符串 ,然后再用另一个包含新值的 字符串填充该变量。</p>

<pre><code>var box = 'Mr.'; 
box = box + ' Lee';
</code></pre>

<p><code>toString()</code>方法可以把值转换成字符串。</p>

<pre><code>var box = 11;
var box = true;
alert(typeof box.toString());
</code></pre>

<p><code>toString()</code>方法一般是不需要传参的,但在数值转成字符串的时候,可以传递进制参数 。</p>

<pre><code>var box = 10;
alert(box.toString());   //10,默认输出 
alert(box.toString(2));   //1010,二进制输出
alert(box.toString(8));    //12,八进制输出
alert(box.toString(10));   //10,十进制输出
alert(box.toString(16));   //a,十六进制输出
</code></pre>

<p>如果在转型之前不知道变量是否是 null 或者 undefined 的情况下,我们还可以使用转型 函数 <code>String()</code> ,这个函数能够将任何类型的值转换为字符串。</p>

<p>var box = null;
alert(String(box));</p>

<p>PS:如果值有 <code>toString()</code> 方法,则调用该方法并返回相应的结果;如果是 null 或者 undefined,则返回"null"或者"undeinfed"。</p>

<h2>七、Object 类型</h2>

<p>ECMAScript 中的对象其实就是一组数据和功能的集合 。对象可以通过执行 new 操作符 后跟要创建的对象类型的名称来创建。</p>

<pre><code>var box = new Object();
</code></pre>

<p><code>Object()</code>是对象构造,如果对象初始化时不需要传递参数,可以不用写括号,但这种方 式我们是不推荐的。</p>

<pre><code>var box = new Object;
</code></pre>

<p>Object()里可以任意传参,可以传数值、字符串、布尔值等。而且,还可以进行相应的 计算。</p>

<pre><code>var box = new Object(2);             //Object 类型,值是 2
var age = box + 2;                  //可以和普通变量运算 
alert(age);                        //输出结果,转型成 Number 类型了
</code></pre>

<p>既然可以使用 new Object()来表示一个对象,那么我们也可以使用这种 new 操作符来创 建其他类型的对象。</p>

<pre><code>var box = new Number(5); //new String('Lee')、new Boolean(true) 
alert(typeof box); //Object 类型
</code></pre>

<p>PS:面向对象是 JavaScript 课程的重点,这里我们只是简单做个介绍 。</p>
]]></content>
  </entry>
  
</feed>
