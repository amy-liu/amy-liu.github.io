<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jquery | 云端笔记]]></title>
  <link href="http://amy-liu.github.io/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://amy-liu.github.io/"/>
  <updated>2015-10-17T23:05:31+08:00</updated>
  <id>http://amy-liu.github.io/</id>
  <author>
    <name><![CDATA[amy-liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQuery 之 Ajax]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/15/jquery-ajax/"/>
    <updated>2015-10-15T21:41:51+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/15/jquery-ajax</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery 之 动画效果]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/15/jquery-zhi-dong-hua-xiao-guo/"/>
    <updated>2015-10-15T21:40:46+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/15/jquery-zhi-dong-hua-xiao-guo</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery 之 高级事件]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/14/jquery-zhi-gao-ji-jian/"/>
    <updated>2015-10-14T22:34:16+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/14/jquery-zhi-gao-ji-jian</id>
    <content type="html"><![CDATA[<h3>一、模拟操作</h3>

<p>在事件触发的时候,有时我们需要一些模拟用户行为的操作。例如:当网页加载完毕后 自行点击一个按钮触发一个事件,而不是用户去点击。</p>

<p>点击按钮事件
<code>
$('input').click(function () {
    alert('我的第一次点击来自模拟!');
});
</code>
模拟用户点击行为</p>

<pre><code>$('input').trigger('click');
</code></pre>

<!--more-->


<p>可以合并两个方法
<code>
$('input').click(function () {
    alert('我的第一次点击来自模拟!');
}).trigger('click');
</code>
有时在模拟用户行为的时候,我们需要给事件执行传递参数,这个参数类似与 <code>event.data</code> 的额外数据,可以可以是数字、字符串、数组、对象。
<code>
$('input').click(function (e, data1, data2) {
    alert(data1 + ',' + data2);
}).trigger('click', ['abc', '123']);
</code></p>

<p>jQuery 还提供了另外一个模拟用户行为的方法 : <code>.triggerHandler();</code>这个方法的使用 和 <code>.trigger()</code> 方法一样。</p>

<pre><code>$('input').click(function () { 
    alert('我的第一次点击来自模拟!');
}).triggerHandler('click');
</code></pre>

<p>1 <code>.triggerHandler()</code> 方法并不会触发事件的默认行为,而 <code>.trigger()</code> 会。</p>

<pre><code>$('form').trigger('submit');         //模拟用户执行提交,并跳转到执行页面 
$('form').triggerHandler('submit');  //模拟用户执行提交,并阻止的默认行为
</code></pre>

<p>如果我们希望使用 <code>.trigger()</code> 来模拟用户提交,并且阻止事件的默认行为,则需要这么写:</p>

<pre><code>$('form').submit(function (e) {
    e.preventDefault(); //阻止默认行为 
}).trigger('submit');
</code></pre>

<p>2 <code>.triggerHandler()</code> 方法只会影响第一个匹配到的元素,而 <code>.trigger()</code> 会影响所有。</p>

<p>3 <code>.triggerHandler()</code> 方法会返回当前事件执行的返回值,如果没有返回值,则返回 <code>undefined;</code> 而 <code>.trigger()</code> 则返回当前包含事件触发元素的 jQuery 对象(方便链式连缀调用)。</p>

<pre><code>alert($('input').click(function () { 
    return 123;
}).triggerHandler('click')); //返回 123,没有 return 返回
</code></pre>

<p>4 <code>.trigger()</code> 在创建事件的时候,会冒泡。但这种冒泡是自定义事件才能体现出来,是 jQuery 扩展于 DOM 的机制,并非 DOM 特性。而 <code>.triggerHandler()</code>不会冒泡。</p>

<pre><code>var index = 1; 
$('div').bind('myEvent',function(){
    alert('自定义事件' + index);
    index++; });
$('.div3').trigger("myEvent");
</code></pre>

<h2>二、命名空间</h2>

<p>有时,我们想对事件进行移除。但对于同名同元素绑定的事件移除往往比较麻烦,这个 时候,可以使用事件的命名空间解决。</p>

<pre><code>$('input').bind('click.abc', function () { 
    alert('abc');
});
$('input').bind('click.xyz', function () { 
    alert('xyz');
});
$('input').unbind('click.abc');    //移除 click 实践中命名空间为 abc 的
</code></pre>

<p>注意 : 也可以直接使用(&lsquo;.abc&rsquo;),这样的话,可以移除相同命名空间的不同事件。对于模拟操作 <code>.trigger()</code> 和 <code>.triggerHandler(),</code>用法也是一样的。</p>

<pre><code>$('input').trigger('click.abc');
</code></pre>

<h2>三、事件委托</h2>

<p>使用 <code>.bind()</code> 不具备动态绑定功能,只有点击原始按钮才能生成</p>

<pre><code>$('.button').bind('click', function () {
    $(this).clone().appendTo('#box'); 
});
</code></pre>

<p>使用 <code>.live()</code> 具备动态绑定功能,jQuery1.3 使用,jQuery1.7 之后废弃,jQuery1.9 删除</p>

<pre><code>$('.button').live('click', function () {
    $(this).clone().appendTo('#box'); 
});
</code></pre>

<p><code>.live()</code> 原理就是把 <code>click</code> 事件绑定到祖先元素 <code>$(document)</code> 上,而只需要给 <code>$(document)</code> 绑 定一次即可。
然后就可以处理后续动态加载的按钮的单击事件。在接受任何 事件时, <code>$(document)</code> 对象都会检查事件类型 <code>(event.type)</code> 和事件目标 <code>(event.target),</code> 如果 click 事件是 <code>.button,</code> 那么就执行委托给它的处理程序。.live()方法已经被删除,无法使用了。需 要测试使用的话,需要引入向下兼容插件。</p>

<p>当我们需要停止事件委托的时候,可以使用.die()来取消掉。</p>

<pre><code>$('.button').die('click');
</code></pre>

<p>由于.live()和.die()在 jQuery1.4.3 版本中废弃了,之后推出语义清晰、减少冒泡传播层次、 又支持链接连缀调用方式的方法:<code>.delegate()</code>和.<code>undelegate()。</code>但这个方法在 jQuery1.7 版本中 被 <code>.on()</code> 方法整合替代了。</p>

<pre><code>$('#box').delegate('.button', 'click', function () { 
    $(this).clone().appendTo('#box');
});

$('#box').undelegate('.button','click');
</code></pre>

<p>注意 : .live()和.delegate()和.bind()方法一样都是事件绑定,那么区别也很明显,用途上 遵循两个规则:</p>

<p>1.在 DOM 中很多元素绑定相同事件时;</p>

<p>2.在 DOM 中尚不存在即将生成的 元素绑定事件时;我们推荐使用事件委托的绑定方式,否则推荐使用.bind()的普通绑定。</p>

<h2>四、on、off 和 one</h2>

<p>目前绑定事件和解绑的方法有三组共六个。由于这三组的共存可能会造成一定的混乱,为此 jQuery1.7 以后推出了 <code>.on()</code> 和 <code>.off()</code>方法彻底摒弃前面三组。</p>

<p>替代.bind()方式,并使用额外数据和事件对象</p>

<pre><code>$('.button').on('click', {user : 'Lee'}, function (e) {
    alert('替代.bind()' + e.data.user); 
});
</code></pre>

<p>替代.bind()方式,并绑定多个事件</p>

<pre><code>$('.button').on('mouseover mouseout', function () {
    alert('替代.bind()移入移出!'); 
});
</code></pre>

<p>代.bind()方式,以对象模式绑定多个事件</p>

<pre><code>$('.button').on({
    mouseover : function () { 
        alert('替代.bind()移入!');
        },
    mouseout : function () {
        alert('替代.bind()移出!'); 
        }
    });
</code></pre>

<p>替代.bind()方式,阻止默认行为并取消冒泡</p>

<pre><code>$('form').on('submit', function () {
    return false; 
});
</code></pre>

<p>或</p>

<pre><code>$('form').on('submit', false);
</code></pre>

<p>替代.unbind()方式,移除事件</p>

<pre><code>$('.button').off('click'); 
$('.button').off('click', fn); 
$('.button').off('click.abc');
</code></pre>

<p>替代.live()和.delegate(),事件委托</p>

<pre><code>$('#box').on('click', '.button', function () {
    $(this).clone().appendTo('#box'); 
});
</code></pre>

<p>替代.die()和.undelegate(),取消事件委托</p>

<pre><code>$('#box').off('click', '.button');
</code></pre>

<p>不管是.bind()还是.on(),绑定事件后都不是自动移除事件的,需要通过.unbind()和.off() 来手工移除。jQuery 提供了 <code>.one()</code> 方法,绑定元素执行完毕后自动移除事件,可以方法仅触 发一次的事件。</p>

<p>类似于.bind()只触发一次</p>

<pre><code>$('.button').one('click', function () {
    alert('one 仅触发一次!'); 
});
</code></pre>

<p>类似于.delegate()只触发一次</p>

<pre><code>$('#box).one('click', 'click', function () {
    alert('one 仅触发一次!'); 
});
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery 之 事件对象]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/14/jquery-zhi-shi-jian-dui-xiang/"/>
    <updated>2015-10-14T21:58:43+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/14/jquery-zhi-shi-jian-dui-xiang</id>
    <content type="html"><![CDATA[<p>事件对象就是 <code>event</code> 对象,通过处理函数默认传递接受。之前处理函数的 <code>e</code> 就是 <code>event</code> 事件对象。</p>

<h3>一、事件对象</h3>

<pre><code>$('input').bind('click', function (e) {       //接受事件对象参数
    alert(e); 
});
</code></pre>

<p>通过 event.type 属性获取触发事件名
<code>
$('input').click(function (e) {
    alert(e.type);
});
</code>
通过 event.target 获取绑定的 DOM 元素
<code>
$('input').click(function (e) {
    alert(e.target);
});
</code></p>

<!--more-->


<p>通过 event.data 获取额外数据,可以是数字、字符串、数组、对象
<code>
$('input').bind('click', 123, function () {          //传递 data 数据
    alert(e.data);                                   //获取数字数据
});
</code>
注意 : 如果字符串就传递:<code>'123'</code>、如果是数组就传递: <code>[123,'abc']</code> ,如果是对象就传递: <code>{user : 'Lee', age : 100}</code> 。数组的调用方式是: <code>e.data[1],</code> 对象的调用方式是: <code>e.data.user。</code></p>

<p>event.data 获取额外数据,对于封装的简写事件也可以使用
<code>
$('input').click({user : 'Lee', age : 100},function (e) {
    alert(e.data.user);
});
</code>
注意 : 键值对的键可以加上引号,也可以不加;在调用的时候也可以使用数组的方式: <code>alert(e.data['user']);</code></p>

<p>获取移入到 div 之前的那个 DOM 元素</p>

<pre><code>$('div').mouseover(function (e) {
    alert(e.relatedTarget); 
});
</code></pre>

<p>获取移出 div 之后到达最近的那个 DOM 元素</p>

<pre><code>$('div').mouseout(function (e) {
    alert(e.relatedTarget);
 });
</code></pre>

<p>获取绑定的那个 DOM 元素,相当于 this,区别与 <code>event.target</code></p>

<pre><code>$('div').click(function (e) {
    alert(e.currentTarget); 
});
</code></pre>

<p>注意 : <code>event.target</code> 得到的是触发元素的 DOM,<code>event.currentTarget</code> 得到的是监听元素的 DOM。而 <code>this</code>也是得到监听元素的 DOM。</p>

<p>获取上一次事件的返回值</p>

<pre><code>$('div').click(function (e) {
    return '123'; 
});
$('div').click(function (e) { 
    alert(e.result);
});
</code></pre>

<p>获取当前的时间戳</p>

<pre><code>$('div').click(function (e) {
    alert(e.timeStamp); 
});
</code></pre>

<p>获取触发元素鼠标当前的位置</p>

<pre><code>$(document).click(function (e) {
    alert(e.screenY+ ',' + e.pageY + ',' + e.clientY); 
});
</code></pre>

<h3>二、冒泡和默认行为</h3>

<p>如果在页面中重叠了多个元素,并且重叠的这些元素都绑定了同一个事件,那么就会出 现冒泡问题。</p>

<p>jQuery 提供了一个事件对象的方法: <code>event.stopPropagation();</code> 这个方法设置到需要触发 的事件上时,所有上层的冒泡行为都将被取消。
<code>
$('input').click(function (e) {
    alert('按钮被触发了!');
    e.stopPropagation();
});
</code>
默认行为</p>

<p>网页中的元素,在操作的时候会有自己的默认行为。比如:右击文本框输入区域,会弹 出系统菜单、点击超链接会跳转到指定页面、点击提交按钮会提交数据。
<code>
$('a').click(function (e) {
    e.preventDefault();
});
</code>
禁止提交表单跳转
<code>
$('form').submit(function (e) {
    e.preventDefault();
});
</code>
注意 : 如果想让上面的超链接同时阻止默认行为且禁止冒泡行为,可以把两个方法同时 写上: <code>event.stopPropagation()</code> 和 <code>event.preventDefault()</code> 。这两个方法如果需要同时启用的时候, 还有一种简写方案代替,就是直接 <code>return false。</code></p>

<pre><code>$('a').click(function (e) { 
    return false;
});
</code></pre>

<h2>冒泡和默认行为的一些方法</h2>

<p>判断是否取消了元素的默认行为
<code>
 $('input').keyup(function (e) {
    e.preventDefault();
    alert(e.isDefaultPrevented());
});
</code></p>

<p>取消冒泡并取消后续事件处理函数
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(&lsquo;input&rsquo;).click(function (e) {
</span><span class='line'>    alert(&lsquo;input&rsquo;);
</span><span class='line'>    e.stopImmediatePropagation();
</span><span class='line'> });&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$(&lsquo;input&rsquo;).click(function () {
</span><span class='line'>    alert(&lsquo;input2&rsquo;);
</span><span class='line'>});&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$(document).click(function () {
</span><span class='line'>    alert(&lsquo;document&rsquo;);
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure></p>

<p>判断是否调用了 <code>stopPropagation()</code> 方法</p>

<pre><code>$('input').click(function (e) {
    e.stopPropagation();
    alert(e.isPropagationStopped()); 
});
</code></pre>

<p>判断是否执行了 <code>stopImmediatePropagation()</code> 方法</p>

<pre><code>$('input').click(function (e) {
    e.stopImmediatePropagation();
    alert(e.isImmediatePropagationStopped());
});
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery 之 基础事件]]></title>
    <link href="http://amy-liu.github.io/blog/2015/10/13/jquery-zhi-ji-chu-shi-jian/"/>
    <updated>2015-10-13T21:42:16+08:00</updated>
    <id>http://amy-liu.github.io/blog/2015/10/13/jquery-zhi-ji-chu-shi-jian</id>
    <content type="html"><![CDATA[<p>在 JavaScript 课程的学习中,我们掌握了很多使用的事件,常用的事件有:<code>click、dblclick、mousedown、mouseup、mousemove、mouseover、mouseout、change、select、submit、keydown、 keypress、keyup、blur、focus、load、resize、scroll、error。</code>那么,还有更多的事件可以参考 手册中的事件部分。</p>

<h3>一、绑定事件</h3>

<p>jQuery 通过 <code>.bind()</code> 方法来为元素绑定这些事件。可以传递三个参数<code>bind(type, [data], fn),</code>  <code>type</code> 表示一个或多个类型的事件名字符串; <code>[data]</code> 是可选的,作为 <code>event.data</code> 属性值传递一个 额外的数据,这个数据是一个字符串、一个数字、一个数组或一个对象;fn 表示绑定到指 定元素的处理函数。</p>

<pre><code>    $('input').bind('click', function () {    //点击按钮后执行匿名函数
        alert('点击!'); 
    });
</code></pre>

<p>普通处理函数</p>

<pre><code>    $('input').bind('click', fn);       //执行普通函数式无须圆括号
        function fn() {
        alert('点击!'); 
    }
</code></pre>

<p>可以同时绑定多个事件
<code>
$('input').bind('mouseout mouseover', function () {    //移入和移出分别执行一次
    $('div').html(function (index, value) {
        return value + '1';
    });
});
</code></p>

<!--more-->


<p>通过对象键值对绑定多个参数</p>

<pre><code>$('input').bind({             传递一个对象 
    'mouseout' : function () {     //事件名的引号可以省略
        alert('移出');
    },
    'mouseover' : function () {
        alert('移入'); 
    }
});
</code></pre>

<p>使用 unbind 删除绑定的事件</p>

<pre><code> $('input').unbind();
</code></pre>

<p>使用 unbind 参数删除指定类型事件</p>

<pre><code>$('input').unbind('click');
</code></pre>

<p><code>.mouseover()和.mouseout()</code> 表示鼠标移入和移出的时候触发。<code>.mouseenter()和.mouseleave()</code> 这组穿过,子元素不会触发。</p>

<p><code>.keydown()、.keyup()</code>返回的是键码,而 <code>.keypress</code>  返回的是字符编码。
<code>
    $('input').keydown(function (e) {
        alert(e.keyCode);
    });
    $('input').keypress(function (e) {
        alert(e.charCode);
    });
</code>
<code>.focus()和.blur()</code> 分别表示光标激活和丢失,事件触发时机是当前元素。而<code>.focusin() 和.focusout()</code> 也表示光标激活和丢失,但事件触发时机可以是子元素。</p>

<h2>二、复合事件</h2>

<pre><code>$('div').hover(function () {                    //mouseenter 效果
        $(this).css('background', 'black'); 
    }, function () {                            //mouseleave 效果  可省略
        $(this).css('background', 'red');
});
</code></pre>

<p>注意 : <code>.hover()</code> 方法是结合了 <code>.mouseenter()</code> 方法和 <code>.mouseleva()</code> 方法,并非 <code>.mouseover()</code> 和 <code>.mouseout()</code> 方法。</p>
]]></content>
  </entry>
  
</feed>
